<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>Jeu de dames:  Fichier source de regles.c</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body onload='searchBox.OnSelectItem(0);'>
<!-- Généré par Doxygen 1.7.3 -->
<script type="text/javascript"><!--
var searchBox = new SearchBox("searchBox", "search",false,'Recherche');
--></script>
<div id="top">
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="icon.png"></td>
  <td style="padding-left: 0.5em;">
   <div id="projectname">Jeu de dames&#160;<span id="projectnumber">Version Finale</span></div>
  </td>
 </tr>
 </tbody>
</table>
</div>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Page&#160;principale</span></a></li>
      <li><a href="annotated.html"><span>Structures&#160;de&#160;données</span></a></li>
      <li class="current"><a href="files.html"><span>Fichiers</span></a></li>
      <li id="searchli">
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Recherche" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>Liste&#160;des&#160;fichiers</span></a></li>
      <li><a href="globals.html"><span>Portée&#160;globale</span></a></li>
    </ul>
  </div>
<div class="header">
  <div class="headertitle">
<h1>regles.c</h1>  </div>
</div>
<div class="contents">
<div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment"> * regles.c</span>
<a name="l00003"></a>00003 <span class="comment"> *</span>
<a name="l00004"></a>00004 <span class="comment"> *  Created on: 14 avr. 2011</span>
<a name="l00005"></a>00005 <span class="comment"> *      Author: paraita</span>
<a name="l00006"></a>00006 <span class="comment"> */</span>
<a name="l00007"></a>00007 <span class="preprocessor">#include &lt;stdio.h&gt;</span>
<a name="l00008"></a>00008 <span class="preprocessor">#include &lt;stdlib.h&gt;</span>
<a name="l00009"></a>00009 <span class="preprocessor">#include &lt;stddef.h&gt;</span> <span class="comment">/* pour NULL */</span>
<a name="l00010"></a>00010 <span class="preprocessor">#include &lt;string.h&gt;</span> <span class="comment">/* pour memcpy */</span>
<a name="l00011"></a>00011 <span class="preprocessor">#include &quot;<a class="code" href="regles_8h.html" title="module des regles et d&amp;#39;enumeration des coups.">regles.h</a>&quot;</span>
<a name="l00012"></a>00012 
<a name="l00013"></a>00013 <span class="preprocessor">#define NBCOUPS 2000</span>
<a name="l00014"></a>00014 <span class="preprocessor"></span><span class="preprocessor">#define NBDEPLACEMENTS 2</span>
<a name="l00015"></a>00015 <span class="preprocessor"></span>
<a name="l00016"></a>00016 <span class="comment">/*</span>
<a name="l00017"></a>00017 <span class="comment"> * POSITION 1: x-1,y-1</span>
<a name="l00018"></a>00018 <span class="comment"> * POSITION 2: x+1,y-1</span>
<a name="l00019"></a>00019 <span class="comment"> * POSITION 3: x-1,y+1</span>
<a name="l00020"></a>00020 <span class="comment"> * POSITION 4: x+1,y+1</span>
<a name="l00021"></a>00021 <span class="comment"> */</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="comment">/* retourne les coups possibles pour un pion */</span>
<a name="l00024"></a><a class="code" href="regles_8h.html#a96d861d76d7070b120ca385c13aad984">00024</a> <a class="code" href="structcoup.html" title="Objet coup. Un coup est défini par un numéro de case de départ, un numéro de case d&amp;#39;arrivée...">coup</a>* coupsPossibles(<span class="keyword">const</span> <a class="code" href="structcase__plateau.html" title="Objet case du plateau de jeu. Une case est définie par une couleur et, si elle est noire...">case_plateau</a> c, <span class="keyword">const</span> <a class="code" href="structplateau.html" title="Objet plateau. Le plateau est composé de 50 cases, numérotées de 1 à 50. Il comporte un historique de...">plateau</a> p) {
<a name="l00025"></a>00025 
<a name="l00026"></a>00026         <a class="code" href="structcoup.html" title="Objet coup. Un coup est défini par un numéro de case de départ, un numéro de case d&amp;#39;arrivée...">coup</a> *cp = calloc(NBCOUPS, <span class="keyword">sizeof</span>(<a class="code" href="structcoup.html" title="Objet coup. Un coup est défini par un numéro de case de départ, un numéro de case d&amp;#39;arrivée...">coup</a>));
<a name="l00027"></a>00027         <a class="code" href="structplateau.html" title="Objet plateau. Le plateau est composé de 50 cases, numérotées de 1 à 50. Il comporte un historique de...">plateau</a> p_futur = p;
<a name="l00028"></a>00028         <span class="keywordtype">int</span> cnt_coup = 0;
<a name="l00029"></a>00029         <a class="code" href="structcase__plateau.html" title="Objet case du plateau de jeu. Une case est définie par une couleur et, si elle est noire...">case_plateau</a> case_courant = c;
<a name="l00030"></a>00030         <a class="code" href="plateau_8h.html#a8282be6127518547fa916dd6cfef17cb" title="La couleur d&amp;#39;un pion.">couleur_pion</a> adversaire = (c.pion.couleur == blanc) ? noir : blanc;
<a name="l00031"></a>00031 
<a name="l00032"></a>00032         <span class="comment">/* conditions de départ */</span>
<a name="l00033"></a>00033         <a class="code" href="structcoup.html" title="Objet coup. Un coup est défini par un numéro de case de départ, un numéro de case d&amp;#39;arrivée...">coup</a> coup_courant;
<a name="l00034"></a>00034         coup_courant.old_case = case_courant.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>;
<a name="l00035"></a>00035         coup_courant.nombre_prises = 0;
<a name="l00036"></a>00036         coup_courant.<a class="code" href="structcoup.html#aa33da004dccb192cb33bc00c26c6e859">tc</a> = <a class="code" href="plateau_8h.html#a9e00f85b4b6ec2d8bdfbe94ff40f0eeeacab1e15e82c5976bfb476ddfe145263c">x</a>;
<a name="l00037"></a>00037         coup_courant.<a class="code" href="structcoup.html#aa66b88eb8140c2f459ac92fad0796510">chemin</a>[coup_courant.nombre_prises++] = case_courant;
<a name="l00038"></a>00038 
<a name="l00039"></a>00039         <span class="comment">/* pour signaler qu&#39;on est dans une rafle */</span>
<a name="l00040"></a>00040         <span class="keywordtype">int</span> nouvelle_rafle = 0;
<a name="l00041"></a>00041         <span class="keywordtype">int</span> fini = 0;
<a name="l00042"></a>00042         <span class="keywordtype">int</span> derniere_position = 0;
<a name="l00043"></a>00043 
<a name="l00044"></a>00044         <span class="comment">/* quand on est sur la case de départ on marque l&#39;element qu&#39;on va visiter</span>
<a name="l00045"></a>00045 <span class="comment">         * ainsi on ne reparcours pas une deuxieme fois quand on revient durant le backtrack</span>
<a name="l00046"></a>00046 <span class="comment">         */</span>
<a name="l00047"></a>00047         <a class="code" href="structcase__plateau.html" title="Objet case du plateau de jeu. Une case est définie par une couleur et, si elle est noire...">case_plateau</a> to_avoid_depart[5];
<a name="l00048"></a>00048         <span class="keywordtype">int</span> cnt_avoid_depart = 0;
<a name="l00049"></a>00049 
<a name="l00050"></a>00050         <span class="comment">/*</span>
<a name="l00051"></a>00051 <span class="comment">         * quand on est sur une case pendant une prise, on marque les pions alentours qu&#39;on a visité</span>
<a name="l00052"></a>00052 <span class="comment">         * au cas ou il y a plusieurs choix possibles</span>
<a name="l00053"></a>00053 <span class="comment">         */</span>
<a name="l00054"></a>00054         <a class="code" href="structcase__plateau.html" title="Objet case du plateau de jeu. Une case est définie par une couleur et, si elle est noire...">case_plateau</a> to_avoid_parcours[5];
<a name="l00055"></a>00055         <span class="keywordtype">int</span> cnt_avoid_parcours = 0;
<a name="l00056"></a>00056 
<a name="l00057"></a>00057         <span class="comment">/* ---------------------------------------------------------------------------</span>
<a name="l00058"></a>00058 <span class="comment">         * stratégie:</span>
<a name="l00059"></a>00059 <span class="comment">         *</span>
<a name="l00060"></a>00060 <span class="comment">         *                     |       |</span>
<a name="l00061"></a>00061 <span class="comment">         *         1   |       |   2                            On teste d&#39;abord les cases</span>
<a name="l00062"></a>00062 <span class="comment">         *              _______|_______|_______                         dans l&#39;ordre indiqué toujours</span>
<a name="l00063"></a>00063 <span class="comment">         *                     | case  |                                        par rapport à la case courante</span>
<a name="l00064"></a>00064 <span class="comment">         *             |courant|</span>
<a name="l00065"></a>00065 <span class="comment">         *              _______|_______|_______</span>
<a name="l00066"></a>00066 <span class="comment">         *                     |       |</span>
<a name="l00067"></a>00067 <span class="comment">         *                 3   |       |   4</span>
<a name="l00068"></a>00068 <span class="comment">         *             |       |</span>
<a name="l00069"></a>00069 <span class="comment">         *</span>
<a name="l00070"></a>00070 <span class="comment">         *</span>
<a name="l00071"></a>00071 <span class="comment">         *</span>
<a name="l00072"></a>00072 <span class="comment">         * ---------------------------------------------------------------------------</span>
<a name="l00073"></a>00073 <span class="comment">         */</span>
<a name="l00074"></a>00074 
<a name="l00075"></a>00075         <span class="comment">/* aTester est la case qu&#39;on veut prendre s&#39;il y a un pion du joueur adverse dessus */</span>
<a name="l00076"></a>00076         <a class="code" href="structcase__plateau.html" title="Objet case du plateau de jeu. Une case est définie par une couleur et, si elle est noire...">case_plateau</a> aTester = <a class="code" href="plateau_8h.html#a60a8f706865d0ae9087f8d65d4667655" title="retourne la case si elle existe, ou la case 0 sinon">get_case_plateau_silent</a>(case_courant.x-1,case_courant.y-1,p_futur);
<a name="l00077"></a>00077 
<a name="l00078"></a>00078 
<a name="l00079"></a>00079         <span class="keywordflow">while</span>(!fini) {
<a name="l00080"></a>00080 
<a name="l00081"></a>00081                 <span class="comment">/* POSITION 1 */</span>
<a name="l00082"></a>00082                 <span class="keywordflow">if</span>((aTester.<a class="code" href="structcase__plateau.html#a173f25d2fd7c653d77ca8174ba4f636d">est_libre</a> == 0)
<a name="l00083"></a>00083                                 &amp;&amp; (aTester.pion.couleur == adversaire)
<a name="l00084"></a>00084                                 &amp;&amp; (est_prenable(aTester.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>,&amp;p_futur) == 1)
<a name="l00085"></a>00085                                 &amp;&amp; ((<a class="code" href="plateau_8h.html#a60a8f706865d0ae9087f8d65d4667655" title="retourne la case si elle existe, ou la case 0 sinon">get_case_plateau_silent</a>(aTester.x-1, aTester.y-1, p_futur).<a class="code" href="structcase__plateau.html#a173f25d2fd7c653d77ca8174ba4f636d">est_libre</a>)
<a name="l00086"></a>00086                                                 || coup_inclus(<a class="code" href="plateau_8h.html#a60a8f706865d0ae9087f8d65d4667655" title="retourne la case si elle existe, ou la case 0 sinon">get_case_plateau_silent</a>(aTester.x-1, aTester.y-1, p_futur),coup_courant.<a class="code" href="structcoup.html#aa66b88eb8140c2f459ac92fad0796510">chemin</a>,coup_courant.nombre_prises))
<a name="l00087"></a>00087                                 &amp;&amp; (!coup_inclus(aTester, coup_courant.<a class="code" href="structcoup.html#ae19b3a66d3f4e66b8f69a38e4005f44a">prises</a>, coup_courant.nombre_prises))
<a name="l00088"></a>00088                                 &amp;&amp; (<a class="code" href="plateau_8h.html#a60a8f706865d0ae9087f8d65d4667655" title="retourne la case si elle existe, ou la case 0 sinon">get_case_plateau_silent</a>(aTester.x-1, aTester.y-1, p_futur).<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a> != 0)
<a name="l00089"></a>00089                                 &amp;&amp; (aTester.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a> != derniere_position)
<a name="l00090"></a>00090                                 &amp;&amp; (!coup_inclus(aTester, to_avoid_parcours, cnt_avoid_parcours))) {
<a name="l00091"></a>00091                         <span class="keywordflow">if</span>((case_courant.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a> == coup_courant.old_case)
<a name="l00092"></a>00092                                         &amp;&amp; (coup_courant.nombre_prises &lt;= 1)
<a name="l00093"></a>00093                                         &amp;&amp; (coup_inclus(aTester, to_avoid_depart, cnt_avoid_depart))) {
<a name="l00094"></a>00094                                 <span class="keywordflow">break</span>;
<a name="l00095"></a>00095                         }
<a name="l00096"></a>00096                         <span class="keywordflow">else</span> {
<a name="l00097"></a>00097                                 nouvelle_rafle = 1;
<a name="l00098"></a>00098                                 derniere_position = 0;
<a name="l00099"></a>00099                                 <span class="comment">/* si je suis sur la case de départ, j&#39;ajoute aTester a la liste des cases a eviter */</span>
<a name="l00100"></a>00100                                 <span class="keywordflow">if</span> ((case_courant.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a> == coup_courant.old_case)
<a name="l00101"></a>00101                                                 &amp;&amp; (coup_courant.nombre_prises &lt;= 1)) {
<a name="l00102"></a>00102                                         to_avoid_depart[cnt_avoid_depart++] = aTester;
<a name="l00103"></a>00103                                 }
<a name="l00104"></a>00104                                 <span class="comment">/* nouvelle_position est la case ou on atteri apres avoir mangé aTester */</span>
<a name="l00105"></a>00105                                 case_courant = <a class="code" href="plateau_8h.html#a60a8f706865d0ae9087f8d65d4667655" title="retourne la case si elle existe, ou la case 0 sinon">get_case_plateau_silent</a>(aTester.x-1, aTester.y-1, p_futur);
<a name="l00106"></a>00106                                 coup_courant.new_case = case_courant.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>;
<a name="l00107"></a>00107                                 coup_courant.<a class="code" href="structcoup.html#ae19b3a66d3f4e66b8f69a38e4005f44a">prises</a>[coup_courant.nombre_prises - 1] = aTester;
<a name="l00108"></a>00108                                 coup_courant.<a class="code" href="structcoup.html#aa66b88eb8140c2f459ac92fad0796510">chemin</a>[coup_courant.nombre_prises++] = case_courant;
<a name="l00109"></a>00109 
<a name="l00110"></a>00110                                 <span class="comment">/* on va reessayer le test sur la POSITION 1 de aTester */</span>
<a name="l00111"></a>00111                                 aTester = <a class="code" href="plateau_8h.html#a60a8f706865d0ae9087f8d65d4667655" title="retourne la case si elle existe, ou la case 0 sinon">get_case_plateau_silent</a>(case_courant.x-1,case_courant.y-1, p_futur);
<a name="l00112"></a>00112                         }
<a name="l00113"></a>00113                 }
<a name="l00114"></a>00114                 <span class="keywordflow">else</span> {
<a name="l00115"></a>00115                         aTester = <a class="code" href="plateau_8h.html#a60a8f706865d0ae9087f8d65d4667655" title="retourne la case si elle existe, ou la case 0 sinon">get_case_plateau_silent</a>(case_courant.x+1,case_courant.y-1,p_futur);
<a name="l00116"></a>00116                         <span class="comment">/* POSITION 2 */</span>
<a name="l00117"></a>00117                         <span class="keywordflow">if</span>((aTester.<a class="code" href="structcase__plateau.html#a173f25d2fd7c653d77ca8174ba4f636d">est_libre</a> == 0)
<a name="l00118"></a>00118                                         &amp;&amp; (aTester.pion.couleur == adversaire)
<a name="l00119"></a>00119                                         &amp;&amp; (est_prenable(aTester.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>,&amp;p_futur) == 1)
<a name="l00120"></a>00120                                         &amp;&amp; ((<a class="code" href="plateau_8h.html#a60a8f706865d0ae9087f8d65d4667655" title="retourne la case si elle existe, ou la case 0 sinon">get_case_plateau_silent</a>(aTester.x+1, aTester.y-1, p_futur).<a class="code" href="structcase__plateau.html#a173f25d2fd7c653d77ca8174ba4f636d">est_libre</a>)
<a name="l00121"></a>00121                                                         || coup_inclus(<a class="code" href="plateau_8h.html#a60a8f706865d0ae9087f8d65d4667655" title="retourne la case si elle existe, ou la case 0 sinon">get_case_plateau_silent</a>(aTester.x+1, aTester.y-1, p_futur), coup_courant.<a class="code" href="structcoup.html#aa66b88eb8140c2f459ac92fad0796510">chemin</a>, coup_courant.nombre_prises))
<a name="l00122"></a>00122                                         &amp;&amp; (!coup_inclus(aTester, coup_courant.<a class="code" href="structcoup.html#ae19b3a66d3f4e66b8f69a38e4005f44a">prises</a>, coup_courant.nombre_prises))
<a name="l00123"></a>00123                                         &amp;&amp; (<a class="code" href="plateau_8h.html#a60a8f706865d0ae9087f8d65d4667655" title="retourne la case si elle existe, ou la case 0 sinon">get_case_plateau_silent</a>(aTester.x+1, aTester.y-1, p_futur).<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a> != 0)
<a name="l00124"></a>00124                                         &amp;&amp; (aTester.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a> != derniere_position)
<a name="l00125"></a>00125                                         &amp;&amp; (!coup_inclus(aTester, to_avoid_parcours, cnt_avoid_parcours))) {
<a name="l00126"></a>00126                                 <span class="keywordflow">if</span>((case_courant.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a> == coup_courant.old_case)
<a name="l00127"></a>00127                                                 &amp;&amp; (coup_courant.nombre_prises &lt;= 1)
<a name="l00128"></a>00128                                                 &amp;&amp; (coup_inclus(aTester, to_avoid_depart, cnt_avoid_depart))) {
<a name="l00129"></a>00129                                         <span class="keywordflow">break</span>;
<a name="l00130"></a>00130                                 }
<a name="l00131"></a>00131                                 <span class="keywordflow">else</span> {
<a name="l00132"></a>00132                                         nouvelle_rafle = 1;
<a name="l00133"></a>00133                                         derniere_position = 0;
<a name="l00134"></a>00134                                         <span class="comment">/* si je suis sur la case de départ, j&#39;ajoute aTester a la liste des cases a eviter */</span>
<a name="l00135"></a>00135                                         <span class="keywordflow">if</span> ((case_courant.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a> == coup_courant.old_case)
<a name="l00136"></a>00136                                                 &amp;&amp; (coup_courant.nombre_prises &lt;= 1)){
<a name="l00137"></a>00137                                                 to_avoid_depart[cnt_avoid_depart++] = aTester;
<a name="l00138"></a>00138                                         }
<a name="l00139"></a>00139                                         case_courant = <a class="code" href="plateau_8h.html#a60a8f706865d0ae9087f8d65d4667655" title="retourne la case si elle existe, ou la case 0 sinon">get_case_plateau_silent</a>(aTester.x+1, aTester.y-1, p_futur);
<a name="l00140"></a>00140                                         coup_courant.new_case = case_courant.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>;
<a name="l00141"></a>00141                                         coup_courant.<a class="code" href="structcoup.html#ae19b3a66d3f4e66b8f69a38e4005f44a">prises</a>[coup_courant.nombre_prises - 1] = aTester;
<a name="l00142"></a>00142                                         coup_courant.<a class="code" href="structcoup.html#aa66b88eb8140c2f459ac92fad0796510">chemin</a>[coup_courant.nombre_prises++] = case_courant;
<a name="l00143"></a>00143 
<a name="l00144"></a>00144                                         aTester = <a class="code" href="plateau_8h.html#a60a8f706865d0ae9087f8d65d4667655" title="retourne la case si elle existe, ou la case 0 sinon">get_case_plateau_silent</a>(case_courant.x-1,case_courant.y-1, p_futur);
<a name="l00145"></a>00145                                 }
<a name="l00146"></a>00146                         }
<a name="l00147"></a>00147                         <span class="keywordflow">else</span> {
<a name="l00148"></a>00148                                 aTester = <a class="code" href="plateau_8h.html#a60a8f706865d0ae9087f8d65d4667655" title="retourne la case si elle existe, ou la case 0 sinon">get_case_plateau_silent</a>(case_courant.x-1,case_courant.y+1,p_futur);
<a name="l00149"></a>00149                                 <span class="comment">/* POSITION 3 */</span>
<a name="l00150"></a>00150                                 <span class="keywordflow">if</span>((aTester.<a class="code" href="structcase__plateau.html#a173f25d2fd7c653d77ca8174ba4f636d">est_libre</a> == 0)
<a name="l00151"></a>00151                                                 &amp;&amp; (aTester.pion.couleur == adversaire)
<a name="l00152"></a>00152                                                 &amp;&amp; (est_prenable(aTester.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>,&amp;p_futur) == 1)
<a name="l00153"></a>00153                                                 &amp;&amp; ((<a class="code" href="plateau_8h.html#a60a8f706865d0ae9087f8d65d4667655" title="retourne la case si elle existe, ou la case 0 sinon">get_case_plateau_silent</a>(aTester.x-1, aTester.y+1, p_futur).<a class="code" href="structcase__plateau.html#a173f25d2fd7c653d77ca8174ba4f636d">est_libre</a>)
<a name="l00154"></a>00154                                                                 || coup_inclus(<a class="code" href="plateau_8h.html#a60a8f706865d0ae9087f8d65d4667655" title="retourne la case si elle existe, ou la case 0 sinon">get_case_plateau_silent</a>(aTester.x-1, aTester.y+1, p_futur),coup_courant.<a class="code" href="structcoup.html#aa66b88eb8140c2f459ac92fad0796510">chemin</a>,coup_courant.nombre_prises))
<a name="l00155"></a>00155                                                 &amp;&amp; (!coup_inclus(aTester, coup_courant.<a class="code" href="structcoup.html#ae19b3a66d3f4e66b8f69a38e4005f44a">prises</a>, coup_courant.nombre_prises))
<a name="l00156"></a>00156                                                 &amp;&amp; (<a class="code" href="plateau_8h.html#a60a8f706865d0ae9087f8d65d4667655" title="retourne la case si elle existe, ou la case 0 sinon">get_case_plateau_silent</a>(aTester.x-1, aTester.y+1, p_futur).<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a> != 0)
<a name="l00157"></a>00157                                                 &amp;&amp; (aTester.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a> != derniere_position)
<a name="l00158"></a>00158                                                 &amp;&amp; (!coup_inclus(aTester, to_avoid_parcours, cnt_avoid_parcours))) {
<a name="l00159"></a>00159                                         <span class="keywordflow">if</span>((case_courant.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a> == coup_courant.old_case)
<a name="l00160"></a>00160                                                         &amp;&amp; (coup_courant.nombre_prises &lt;= 1)
<a name="l00161"></a>00161                                                         &amp;&amp; (coup_inclus(aTester, to_avoid_depart, cnt_avoid_depart))) {
<a name="l00162"></a>00162                                                 <span class="keywordflow">break</span>;
<a name="l00163"></a>00163                                         }
<a name="l00164"></a>00164                                         <span class="keywordflow">else</span> {
<a name="l00165"></a>00165                                                 nouvelle_rafle = 1;
<a name="l00166"></a>00166                                                 derniere_position = 0;
<a name="l00167"></a>00167                                                 <span class="comment">/* si je suis sur la case de départ, j&#39;ajoute aTester a la liste des cases a eviter */</span>
<a name="l00168"></a>00168                                                 <span class="keywordflow">if</span> ((case_courant.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a> == coup_courant.old_case)
<a name="l00169"></a>00169                                                         &amp;&amp; (coup_courant.nombre_prises &lt;= 1)){
<a name="l00170"></a>00170                                                         to_avoid_depart[cnt_avoid_depart++] = aTester;
<a name="l00171"></a>00171                                                 }
<a name="l00172"></a>00172                                                 case_courant = <a class="code" href="plateau_8h.html#a60a8f706865d0ae9087f8d65d4667655" title="retourne la case si elle existe, ou la case 0 sinon">get_case_plateau_silent</a>(aTester.x-1, aTester.y+1, p_futur);
<a name="l00173"></a>00173                                                 coup_courant.new_case = case_courant.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>;
<a name="l00174"></a>00174                                                 coup_courant.<a class="code" href="structcoup.html#ae19b3a66d3f4e66b8f69a38e4005f44a">prises</a>[coup_courant.nombre_prises - 1] = aTester;
<a name="l00175"></a>00175                                                 coup_courant.<a class="code" href="structcoup.html#aa66b88eb8140c2f459ac92fad0796510">chemin</a>[coup_courant.nombre_prises++] = case_courant;
<a name="l00176"></a>00176 
<a name="l00177"></a>00177                                                 aTester = <a class="code" href="plateau_8h.html#a60a8f706865d0ae9087f8d65d4667655" title="retourne la case si elle existe, ou la case 0 sinon">get_case_plateau_silent</a>(case_courant.x-1,case_courant.y-1, p_futur);
<a name="l00178"></a>00178                                         }
<a name="l00179"></a>00179                                 }
<a name="l00180"></a>00180                                 <span class="keywordflow">else</span> {
<a name="l00181"></a>00181                                         aTester = <a class="code" href="plateau_8h.html#a60a8f706865d0ae9087f8d65d4667655" title="retourne la case si elle existe, ou la case 0 sinon">get_case_plateau_silent</a>(case_courant.x+1,case_courant.y+1,p_futur);
<a name="l00182"></a>00182                                         <span class="comment">/* POSITION 4 */</span>
<a name="l00183"></a>00183                                         <span class="keywordflow">if</span>((aTester.<a class="code" href="structcase__plateau.html#a173f25d2fd7c653d77ca8174ba4f636d">est_libre</a> == 0)
<a name="l00184"></a>00184                                                         &amp;&amp; (aTester.pion.couleur == adversaire)
<a name="l00185"></a>00185                                                         &amp;&amp; (est_prenable(aTester.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>,&amp;p_futur) == 1)
<a name="l00186"></a>00186                                                         &amp;&amp; ((<a class="code" href="plateau_8h.html#a60a8f706865d0ae9087f8d65d4667655" title="retourne la case si elle existe, ou la case 0 sinon">get_case_plateau_silent</a>(aTester.x+1, aTester.y+1, p_futur).<a class="code" href="structcase__plateau.html#a173f25d2fd7c653d77ca8174ba4f636d">est_libre</a>)
<a name="l00187"></a>00187                                                                         || coup_inclus(<a class="code" href="plateau_8h.html#a60a8f706865d0ae9087f8d65d4667655" title="retourne la case si elle existe, ou la case 0 sinon">get_case_plateau_silent</a>(aTester.x+1, aTester.y+1, p_futur),coup_courant.<a class="code" href="structcoup.html#aa66b88eb8140c2f459ac92fad0796510">chemin</a>,coup_courant.nombre_prises))
<a name="l00188"></a>00188                                                         &amp;&amp; (!coup_inclus(aTester, coup_courant.<a class="code" href="structcoup.html#ae19b3a66d3f4e66b8f69a38e4005f44a">prises</a>, coup_courant.nombre_prises))
<a name="l00189"></a>00189                                                         &amp;&amp; (<a class="code" href="plateau_8h.html#a60a8f706865d0ae9087f8d65d4667655" title="retourne la case si elle existe, ou la case 0 sinon">get_case_plateau_silent</a>(aTester.x+1, aTester.y+1, p_futur).<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a> != 0)
<a name="l00190"></a>00190                                                         &amp;&amp; (aTester.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a> != derniere_position)
<a name="l00191"></a>00191                                                         &amp;&amp; (!coup_inclus(aTester, to_avoid_parcours, cnt_avoid_parcours))) {
<a name="l00192"></a>00192                                                 <span class="keywordflow">if</span>((case_courant.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a> == coup_courant.old_case)
<a name="l00193"></a>00193                                                                 &amp;&amp; (coup_courant.nombre_prises &lt;= 1)
<a name="l00194"></a>00194                                                                 &amp;&amp; (coup_inclus(aTester, to_avoid_depart, cnt_avoid_depart))) {
<a name="l00195"></a>00195                                                         <span class="keywordflow">break</span>;
<a name="l00196"></a>00196                                                 }
<a name="l00197"></a>00197                                                 <span class="keywordflow">else</span> {
<a name="l00198"></a>00198                                                         nouvelle_rafle = 1;
<a name="l00199"></a>00199                                                         derniere_position = 0;
<a name="l00200"></a>00200                                                         <span class="comment">/* si je suis sur la case de départ, j&#39;ajoute aTester a la liste des cases a eviter */</span>
<a name="l00201"></a>00201                                                         <span class="keywordflow">if</span> ((case_courant.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a> == coup_courant.old_case)
<a name="l00202"></a>00202                                                                 &amp;&amp; (coup_courant.nombre_prises &lt;= 1)){
<a name="l00203"></a>00203                                                                 to_avoid_depart[cnt_avoid_depart++] = aTester;
<a name="l00204"></a>00204                                                         }
<a name="l00205"></a>00205                                                         case_courant = <a class="code" href="plateau_8h.html#a60a8f706865d0ae9087f8d65d4667655" title="retourne la case si elle existe, ou la case 0 sinon">get_case_plateau_silent</a>(aTester.x+1, aTester.y+1, p_futur);
<a name="l00206"></a>00206                                                         coup_courant.new_case = case_courant.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>;
<a name="l00207"></a>00207                                                         coup_courant.<a class="code" href="structcoup.html#ae19b3a66d3f4e66b8f69a38e4005f44a">prises</a>[coup_courant.nombre_prises - 1] = aTester;
<a name="l00208"></a>00208                                                         coup_courant.<a class="code" href="structcoup.html#aa66b88eb8140c2f459ac92fad0796510">chemin</a>[coup_courant.nombre_prises++] = case_courant;
<a name="l00209"></a>00209 
<a name="l00210"></a>00210                                                         aTester = <a class="code" href="plateau_8h.html#a60a8f706865d0ae9087f8d65d4667655" title="retourne la case si elle existe, ou la case 0 sinon">get_case_plateau_silent</a>(case_courant.x-1,case_courant.y-1, p_futur);
<a name="l00211"></a>00211                                                 }
<a name="l00212"></a>00212                                         }
<a name="l00213"></a>00213                                         <span class="keywordflow">else</span> {  <span class="comment">/* j&#39;enregistre le coup et je backtrack  si possible, sinon je retourne le tableau de coups */</span>
<a name="l00214"></a>00214 
<a name="l00215"></a>00215                                                 derniere_position = coup_courant.<a class="code" href="structcoup.html#ae19b3a66d3f4e66b8f69a38e4005f44a">prises</a>[coup_courant.nombre_prises - 2].<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>;
<a name="l00216"></a>00216                                                 <span class="comment">/* si on a rien au bout d&#39;une rafle et si on est pas dans la case 0, on l&#39;ajoute a cp */</span>
<a name="l00217"></a>00217                                                 <span class="keywordflow">if</span>(nouvelle_rafle &amp;&amp; coup_courant.old_case != 0 &amp;&amp; coup_courant.new_case != 0) {
<a name="l00218"></a>00218                                                         cp[cnt_coup++] = coup_courant;
<a name="l00219"></a>00219                                                         nouvelle_rafle = 0;
<a name="l00220"></a>00220                                                 }
<a name="l00221"></a>00221                                                 <span class="keywordflow">if</span>(coup_courant.nombre_prises &lt;= 1) { <span class="comment">/* si y&#39;a plus de prises en fait */</span>
<a name="l00222"></a>00222                                                         fini = 1;
<a name="l00223"></a>00223                                                 }
<a name="l00224"></a>00224                                                 <span class="comment">/* et on backtracke */</span>
<a name="l00225"></a>00225 
<a name="l00226"></a>00226                                                 to_avoid_parcours[cnt_avoid_parcours++] = coup_courant.<a class="code" href="structcoup.html#ae19b3a66d3f4e66b8f69a38e4005f44a">prises</a>[coup_courant.nombre_prises - 2];
<a name="l00227"></a>00227                                                 coup_courant.nombre_prises--;
<a name="l00228"></a>00228                                                 case_courant = coup_courant.<a class="code" href="structcoup.html#aa66b88eb8140c2f459ac92fad0796510">chemin</a>[coup_courant.nombre_prises - 1];
<a name="l00229"></a>00229                                                 aTester = <a class="code" href="plateau_8h.html#a60a8f706865d0ae9087f8d65d4667655" title="retourne la case si elle existe, ou la case 0 sinon">get_case_plateau_silent</a>(case_courant.x-1,case_courant.y-1, p_futur);
<a name="l00230"></a>00230                                         }
<a name="l00231"></a>00231                                 }
<a name="l00232"></a>00232                         }
<a name="l00233"></a>00233                 }
<a name="l00234"></a>00234         }
<a name="l00235"></a>00235         <span class="comment">/* on ajoute aussi les deplacements possibles */</span>
<a name="l00236"></a>00236         <a class="code" href="structcoup.html" title="Objet coup. Un coup est défini par un numéro de case de départ, un numéro de case d&amp;#39;arrivée...">coup</a> *deplacements = get_deplacements(c, p);
<a name="l00237"></a>00237         <span class="keywordflow">while</span>((deplacements-&gt;old_case != 0) &amp;&amp; (deplacements-&gt;new_case != 0)) {
<a name="l00238"></a>00238                 cp[cnt_coup++] = *deplacements;
<a name="l00239"></a>00239                 deplacements++;
<a name="l00240"></a>00240         }
<a name="l00241"></a>00241         <span class="comment">/* pour marquer la fin de tableau */</span>
<a name="l00242"></a>00242         <a class="code" href="structcoup.html" title="Objet coup. Un coup est défini par un numéro de case de départ, un numéro de case d&amp;#39;arrivée...">coup</a> bidon;
<a name="l00243"></a>00243         bidon.old_case = 0;
<a name="l00244"></a>00244         bidon.new_case = 0;
<a name="l00245"></a>00245         cp[cnt_coup++] = bidon;
<a name="l00246"></a>00246         <span class="keywordflow">return</span> cp;
<a name="l00247"></a>00247 }
<a name="l00248"></a>00248 
<a name="l00249"></a><a class="code" href="regles_8h.html#a69e7dc6de03ec30120b2a49ef6bb2f51">00249</a> <span class="keywordtype">int</span> get_possible_case_pos(<span class="keywordtype">int</span> c, <span class="keywordtype">int</span> diag, <a class="code" href="structplateau.html" title="Objet plateau. Le plateau est composé de 50 cases, numérotées de 1 à 50. Il comporte un historique de...">plateau</a> p) {
<a name="l00250"></a>00250         <span class="keywordtype">int</span> <a class="code" href="plateau_8h.html#a9e00f85b4b6ec2d8bdfbe94ff40f0eeeacab1e15e82c5976bfb476ddfe145263c">x</a> = p.<a class="code" href="structplateau.html#a6afaa60f594542e0d742b0c6d3223392">cases</a>[c].x;
<a name="l00251"></a>00251         <span class="keywordtype">int</span> y = p.<a class="code" href="structplateau.html#a6afaa60f594542e0d742b0c6d3223392">cases</a>[c].y;
<a name="l00252"></a>00252         <span class="keywordflow">switch</span> (diag) {
<a name="l00253"></a>00253         <span class="keywordflow">case</span> 1:
<a name="l00254"></a>00254                 <span class="keywordflow">while</span> (x &gt; 0 &amp;&amp; y &gt; 0) {
<a name="l00255"></a>00255                         x--;
<a name="l00256"></a>00256                         y--;
<a name="l00257"></a>00257                         <a class="code" href="structcase__plateau.html" title="Objet case du plateau de jeu. Une case est définie par une couleur et, si elle est noire...">case_plateau</a> aPrendre = <a class="code" href="plateau_8h.html#a60a8f706865d0ae9087f8d65d4667655" title="retourne la case si elle existe, ou la case 0 sinon">get_case_plateau_silent</a>(x, y, p);
<a name="l00258"></a>00258                         <span class="keywordflow">if</span> (!aPrendre.<a class="code" href="structcase__plateau.html#a173f25d2fd7c653d77ca8174ba4f636d">est_libre</a>) { <span class="comment">/* si on trouve une case non libre */</span>
<a name="l00259"></a>00259                                 <span class="keywordflow">if</span> (aPrendre.pion.couleur != p.<a class="code" href="structplateau.html#a6afaa60f594542e0d742b0c6d3223392">cases</a>[c].pion.couleur) { <span class="comment">/* soit elle à un pion adversaire */</span>
<a name="l00260"></a>00260                                         <span class="keywordflow">return</span> <a class="code" href="plateau_8h.html#a60a8f706865d0ae9087f8d65d4667655" title="retourne la case si elle existe, ou la case 0 sinon">get_case_plateau_silent</a>(x, y, p).<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>;
<a name="l00261"></a>00261                                 } <span class="keywordflow">else</span> { <span class="comment">/* soit un pion de la même couleur */</span>
<a name="l00262"></a>00262                                         <span class="keywordflow">return</span> 0;
<a name="l00263"></a>00263                                 }
<a name="l00264"></a>00264                         }
<a name="l00265"></a>00265                 }
<a name="l00266"></a>00266                 <span class="keywordflow">return</span> 0;
<a name="l00267"></a>00267                 <span class="keywordflow">break</span>;
<a name="l00268"></a>00268         <span class="keywordflow">case</span> 2:
<a name="l00269"></a>00269                 <span class="keywordflow">while</span> (x &lt;= 10 &amp;&amp; y &gt; 0) {
<a name="l00270"></a>00270                         x++;
<a name="l00271"></a>00271                         y--;
<a name="l00272"></a>00272                         <a class="code" href="structcase__plateau.html" title="Objet case du plateau de jeu. Une case est définie par une couleur et, si elle est noire...">case_plateau</a> aPrendre = <a class="code" href="plateau_8h.html#a60a8f706865d0ae9087f8d65d4667655" title="retourne la case si elle existe, ou la case 0 sinon">get_case_plateau_silent</a>(x, y, p);
<a name="l00273"></a>00273                         <span class="keywordflow">if</span> (!aPrendre.<a class="code" href="structcase__plateau.html#a173f25d2fd7c653d77ca8174ba4f636d">est_libre</a>) { <span class="comment">/* si on trouve une case non libre */</span>
<a name="l00274"></a>00274                                 <span class="keywordflow">if</span> (aPrendre.pion.couleur != p.<a class="code" href="structplateau.html#a6afaa60f594542e0d742b0c6d3223392">cases</a>[c].pion.couleur) { <span class="comment">/* soit elle à un pion adversaire */</span>
<a name="l00275"></a>00275                                         <span class="keywordflow">return</span> <a class="code" href="plateau_8h.html#a60a8f706865d0ae9087f8d65d4667655" title="retourne la case si elle existe, ou la case 0 sinon">get_case_plateau_silent</a>(x, y, p).<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>;
<a name="l00276"></a>00276                                 } <span class="keywordflow">else</span> { <span class="comment">/* soit un pion de la même couleur */</span>
<a name="l00277"></a>00277                                         <span class="keywordflow">return</span> 0;
<a name="l00278"></a>00278                                 }
<a name="l00279"></a>00279                         }
<a name="l00280"></a>00280                 }
<a name="l00281"></a>00281                 <span class="keywordflow">return</span> 0;
<a name="l00282"></a>00282                 <span class="keywordflow">break</span>;
<a name="l00283"></a>00283         <span class="keywordflow">case</span> 3:
<a name="l00284"></a>00284                 <span class="keywordflow">while</span> (x &gt; 0 &amp;&amp; y &lt;= 10) {
<a name="l00285"></a>00285                         x--;
<a name="l00286"></a>00286                         y++;
<a name="l00287"></a>00287                         <a class="code" href="structcase__plateau.html" title="Objet case du plateau de jeu. Une case est définie par une couleur et, si elle est noire...">case_plateau</a> aPrendre = <a class="code" href="plateau_8h.html#a60a8f706865d0ae9087f8d65d4667655" title="retourne la case si elle existe, ou la case 0 sinon">get_case_plateau_silent</a>(x, y, p);
<a name="l00288"></a>00288                         <span class="keywordflow">if</span> (!aPrendre.<a class="code" href="structcase__plateau.html#a173f25d2fd7c653d77ca8174ba4f636d">est_libre</a>) { <span class="comment">/* si on trouve une case non libre */</span>
<a name="l00289"></a>00289                                 <span class="keywordflow">if</span> (aPrendre.pion.couleur != p.<a class="code" href="structplateau.html#a6afaa60f594542e0d742b0c6d3223392">cases</a>[c].pion.couleur) { <span class="comment">/* soit elle à un pion adversaire */</span>
<a name="l00290"></a>00290                                         <span class="keywordflow">return</span> <a class="code" href="plateau_8h.html#a60a8f706865d0ae9087f8d65d4667655" title="retourne la case si elle existe, ou la case 0 sinon">get_case_plateau_silent</a>(x, y, p).<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>;
<a name="l00291"></a>00291                                 } <span class="keywordflow">else</span> { <span class="comment">/* soit un pion de la même couleur */</span>
<a name="l00292"></a>00292                                         <span class="keywordflow">return</span> 0;
<a name="l00293"></a>00293                                 }
<a name="l00294"></a>00294                         }
<a name="l00295"></a>00295                 }
<a name="l00296"></a>00296                 <span class="keywordflow">return</span> 0;
<a name="l00297"></a>00297                 <span class="keywordflow">break</span>;
<a name="l00298"></a>00298         <span class="keywordflow">case</span> 4:
<a name="l00299"></a>00299                 <span class="keywordflow">while</span> (x &lt;= 10 &amp;&amp; y &lt;= 10) {
<a name="l00300"></a>00300                         x++;
<a name="l00301"></a>00301                         y++;
<a name="l00302"></a>00302                         <a class="code" href="structcase__plateau.html" title="Objet case du plateau de jeu. Une case est définie par une couleur et, si elle est noire...">case_plateau</a> aPrendre = <a class="code" href="plateau_8h.html#a60a8f706865d0ae9087f8d65d4667655" title="retourne la case si elle existe, ou la case 0 sinon">get_case_plateau_silent</a>(x, y, p);
<a name="l00303"></a>00303                         <span class="keywordflow">if</span> (!aPrendre.<a class="code" href="structcase__plateau.html#a173f25d2fd7c653d77ca8174ba4f636d">est_libre</a>) { <span class="comment">/* si on trouve une case non libre */</span>
<a name="l00304"></a>00304                                 <span class="keywordflow">if</span> (aPrendre.pion.couleur != p.<a class="code" href="structplateau.html#a6afaa60f594542e0d742b0c6d3223392">cases</a>[c].pion.couleur) { <span class="comment">/* soit elle à un pion adversaire */</span>
<a name="l00305"></a>00305                                         <span class="keywordflow">return</span> <a class="code" href="plateau_8h.html#a60a8f706865d0ae9087f8d65d4667655" title="retourne la case si elle existe, ou la case 0 sinon">get_case_plateau_silent</a>(x, y, p).<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>;
<a name="l00306"></a>00306                                 } <span class="keywordflow">else</span> { <span class="comment">/* soit un pion de la même couleur */</span>
<a name="l00307"></a>00307                                         <span class="keywordflow">return</span> 0;
<a name="l00308"></a>00308                                 }
<a name="l00309"></a>00309                         }
<a name="l00310"></a>00310                 }
<a name="l00311"></a>00311                 <span class="keywordflow">return</span> 0;
<a name="l00312"></a>00312                 <span class="keywordflow">break</span>;
<a name="l00313"></a>00313         <span class="keywordflow">default</span>:
<a name="l00314"></a>00314                 <span class="keywordflow">return</span> 0;
<a name="l00315"></a>00315                 <span class="keywordflow">break</span>;
<a name="l00316"></a>00316         }
<a name="l00317"></a>00317 }
<a name="l00318"></a>00318 
<a name="l00319"></a>00319 
<a name="l00320"></a><a class="code" href="regles_8h.html#a1bff1ac214ab2332d8b7e3a0b79f262c">00320</a> <a class="code" href="structcoup.html" title="Objet coup. Un coup est défini par un numéro de case de départ, un numéro de case d&amp;#39;arrivée...">coup</a> * completer_coup_dame(<span class="keyword">const</span> <a class="code" href="structcoup.html" title="Objet coup. Un coup est défini par un numéro de case de départ, un numéro de case d&amp;#39;arrivée...">coup</a> c, <span class="keywordtype">int</span> mvt, <a class="code" href="structplateau.html" title="Objet plateau. Le plateau est composé de 50 cases, numérotées de 1 à 50. Il comporte un historique de...">plateau</a> p) {
<a name="l00321"></a>00321         <a class="code" href="structcoup.html" title="Objet coup. Un coup est défini par un numéro de case de départ, un numéro de case d&amp;#39;arrivée...">coup</a> * res = calloc(100, <span class="keyword">sizeof</span>(<a class="code" href="structcoup.html" title="Objet coup. Un coup est défini par un numéro de case de départ, un numéro de case d&amp;#39;arrivée...">coup</a>));
<a name="l00322"></a>00322         <span class="keywordtype">int</span> cpt_res = 0;
<a name="l00323"></a>00323         <a class="code" href="structplateau.html" title="Objet plateau. Le plateau est composé de 50 cases, numérotées de 1 à 50. Il comporte un historique de...">plateau</a> p_futur;
<a name="l00324"></a>00324         <span class="keywordflow">if</span> (mvt == 1 || mvt == 4) { <span class="comment">// si on est dur la diagonale 1-4</span>
<a name="l00325"></a>00325                 <span class="keywordtype">int</span> diag2 = get_possible_case_pos(c.new_case, 2, p); <span class="comment">// on cherche sur les diagonales perpendiculaires</span>
<a name="l00326"></a>00326                 <span class="keywordtype">int</span> diag3 = get_possible_case_pos(c.new_case, 3, p);
<a name="l00327"></a>00327                 <span class="keywordflow">if</span> (diag2) { <span class="comment">// si on peut prendre un pion sur la diagonale 2</span>
<a name="l00328"></a>00328                         <a class="code" href="structcase__plateau.html" title="Objet case du plateau de jeu. Une case est définie par une couleur et, si elle est noire...">case_plateau</a> cPrise = p.<a class="code" href="structplateau.html#a6afaa60f594542e0d742b0c6d3223392">cases</a>[diag2];
<a name="l00329"></a>00329                         <span class="keywordtype">int</span> <a class="code" href="plateau_8h.html#a9e00f85b4b6ec2d8bdfbe94ff40f0eeeacab1e15e82c5976bfb476ddfe145263c">x</a> = cPrise.x + 1;
<a name="l00330"></a>00330                         <span class="keywordtype">int</span> y = cPrise.y - 1;
<a name="l00331"></a>00331                         <span class="keywordflow">while</span> (x &lt;= 10 &amp;&amp; y &gt; 0 &amp;&amp; <a class="code" href="plateau_8h.html#a60a8f706865d0ae9087f8d65d4667655" title="retourne la case si elle existe, ou la case 0 sinon">get_case_plateau_silent</a>(x, y, p).est_libre) { <span class="comment">/* dans ce cas, on parcours les cases de la diagonale derrière la prise */</span>
<a name="l00332"></a>00332                                 <a class="code" href="structcoup.html" title="Objet coup. Un coup est défini par un numéro de case de départ, un numéro de case d&amp;#39;arrivée...">coup</a> cp = c;
<a name="l00333"></a>00333                                 cp.<a class="code" href="structcoup.html#ae19b3a66d3f4e66b8f69a38e4005f44a">prises</a>[cp.nombre_prises] = cPrise;
<a name="l00334"></a>00334                                 <a class="code" href="structcase__plateau.html" title="Objet case du plateau de jeu. Une case est définie par une couleur et, si elle est noire...">case_plateau</a> new_case = <a class="code" href="plateau_8h.html#a60a8f706865d0ae9087f8d65d4667655" title="retourne la case si elle existe, ou la case 0 sinon">get_case_plateau_silent</a>(x, y, p);
<a name="l00335"></a>00335                                 cp.nombre_prises++;
<a name="l00336"></a>00336                                 cp.<a class="code" href="structcoup.html#aa66b88eb8140c2f459ac92fad0796510">chemin</a>[cp.nombre_prises] = new_case;
<a name="l00337"></a>00337                                 cp.new_case = new_case.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>;
<a name="l00338"></a>00338                                 res[cpt_res++] = cp;
<a name="l00339"></a>00339 
<a name="l00340"></a>00340                                 <span class="keywordflow">if</span> (get_possible_case_pos(new_case.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>, 1, p) <span class="comment">/* si il n&#39;y a pas d&#39;aures prises sur la diagonale, on ajoute le coup */</span>
<a name="l00341"></a>00341                                 || get_possible_case_pos(new_case.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>, 4, p)) {
<a name="l00342"></a>00342 
<a name="l00343"></a>00343                                         p_futur = p;
<a name="l00344"></a>00344                                         plateau_prendre_pion(cPrise.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>, &amp;p_futur);
<a name="l00345"></a>00345                                         plateau_deplacer_pion(c.new_case,
<a name="l00346"></a>00346                                                         new_case.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>, &amp;p_futur);
<a name="l00347"></a>00347                                         <a class="code" href="structcoup.html" title="Objet coup. Un coup est défini par un numéro de case de départ, un numéro de case d&amp;#39;arrivée...">coup</a> * coups_completes =
<a name="l00348"></a>00348                                                         completer_coup_dame(cp, 2, p_futur);
<a name="l00349"></a>00349                                         <span class="keywordtype">int</span> nbCoups = nombre_coups(coups_completes);
<a name="l00350"></a>00350                                         <span class="keywordtype">int</span> i;
<a name="l00351"></a>00351                                         <span class="keywordflow">for</span> (i = 0; i &lt; nbCoups; i++) {
<a name="l00352"></a>00352                                                 res[cpt_res++] = coups_completes[i];
<a name="l00353"></a>00353                                         }
<a name="l00354"></a>00354                                 }
<a name="l00355"></a>00355                                 x++;
<a name="l00356"></a>00356                                 y--;
<a name="l00357"></a>00357                         }
<a name="l00358"></a>00358                 }
<a name="l00359"></a>00359                 <span class="keywordflow">if</span> (diag3) { <span class="comment">// si on peut prendre un pion sur la diagonale 3</span>
<a name="l00360"></a>00360                         <a class="code" href="structcase__plateau.html" title="Objet case du plateau de jeu. Une case est définie par une couleur et, si elle est noire...">case_plateau</a> cPrise = p.<a class="code" href="structplateau.html#a6afaa60f594542e0d742b0c6d3223392">cases</a>[diag3];
<a name="l00361"></a>00361                         <span class="keywordtype">int</span> <a class="code" href="plateau_8h.html#a9e00f85b4b6ec2d8bdfbe94ff40f0eeeacab1e15e82c5976bfb476ddfe145263c">x</a> = cPrise.x - 1;
<a name="l00362"></a>00362                         <span class="keywordtype">int</span> y = cPrise.y + 1;
<a name="l00363"></a>00363                         <span class="keywordflow">while</span> (x &gt; 0 &amp;&amp; y &lt;= 10 &amp;&amp; <a class="code" href="plateau_8h.html#a60a8f706865d0ae9087f8d65d4667655" title="retourne la case si elle existe, ou la case 0 sinon">get_case_plateau_silent</a>(x, y, p).est_libre) { <span class="comment">/* dans ce cas, on parcours les cases de la diagonale derrière la prise */</span>
<a name="l00364"></a>00364                                 <a class="code" href="structcoup.html" title="Objet coup. Un coup est défini par un numéro de case de départ, un numéro de case d&amp;#39;arrivée...">coup</a> cp = c;
<a name="l00365"></a>00365                                 cp.<a class="code" href="structcoup.html#ae19b3a66d3f4e66b8f69a38e4005f44a">prises</a>[cp.nombre_prises] = cPrise;
<a name="l00366"></a>00366                                 <a class="code" href="structcase__plateau.html" title="Objet case du plateau de jeu. Une case est définie par une couleur et, si elle est noire...">case_plateau</a> new_case = <a class="code" href="plateau_8h.html#a60a8f706865d0ae9087f8d65d4667655" title="retourne la case si elle existe, ou la case 0 sinon">get_case_plateau_silent</a>(x, y, p);
<a name="l00367"></a>00367                                 cp.nombre_prises++;
<a name="l00368"></a>00368                                 cp.<a class="code" href="structcoup.html#aa66b88eb8140c2f459ac92fad0796510">chemin</a>[cp.nombre_prises] = new_case;
<a name="l00369"></a>00369                                 cp.new_case = new_case.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>;
<a name="l00370"></a>00370                                 res[cpt_res++] = cp;
<a name="l00371"></a>00371                                 <span class="keywordflow">if</span> (!(get_possible_case_pos(new_case.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>, 1, p) <span class="comment">/* si il n&#39;y a pas d&#39;aures prises sur la diagonale, on ajoute le coup */</span>
<a name="l00372"></a>00372                                 || get_possible_case_pos(new_case.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>, 4, p))) {
<a name="l00373"></a>00373 
<a name="l00374"></a>00374                                         p_futur = p;
<a name="l00375"></a>00375                                         plateau_prendre_pion(cPrise.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>, &amp;p_futur);
<a name="l00376"></a>00376                                         plateau_deplacer_pion(c.new_case,
<a name="l00377"></a>00377                                                         new_case.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>, &amp;p_futur);
<a name="l00378"></a>00378                                         <a class="code" href="structcoup.html" title="Objet coup. Un coup est défini par un numéro de case de départ, un numéro de case d&amp;#39;arrivée...">coup</a> * coups_completes =
<a name="l00379"></a>00379                                                         completer_coup_dame(cp, 3, p_futur);
<a name="l00380"></a>00380                                         <span class="keywordtype">int</span> nbCoups = nombre_coups(coups_completes);
<a name="l00381"></a>00381                                         <span class="keywordtype">int</span> i;
<a name="l00382"></a>00382                                         <span class="keywordflow">for</span> (i = 0; i &lt; nbCoups; i++) {
<a name="l00383"></a>00383                                                 res[cpt_res++] = coups_completes[i];
<a name="l00384"></a>00384                                         }
<a name="l00385"></a>00385                                 }
<a name="l00386"></a>00386                                 x--;
<a name="l00387"></a>00387                                 y++;
<a name="l00388"></a>00388                         }
<a name="l00389"></a>00389                 }
<a name="l00390"></a>00390         } <span class="keywordflow">else</span> { <span class="comment">// sinon on est sur la diagonale 2-3</span>
<a name="l00391"></a>00391                 <span class="keywordtype">int</span> diag1 = get_possible_case_pos(c.new_case, 1, p); <span class="comment">// on cherche sur les diagonales perpendiculaires</span>
<a name="l00392"></a>00392                 <span class="keywordtype">int</span> diag4 = get_possible_case_pos(c.new_case, 4, p);
<a name="l00393"></a>00393                 <span class="keywordflow">if</span> (diag1) { <span class="comment">// si on peut prendre un pion sur la diagonale 1</span>
<a name="l00394"></a>00394                         <a class="code" href="structcase__plateau.html" title="Objet case du plateau de jeu. Une case est définie par une couleur et, si elle est noire...">case_plateau</a> cPrise = p.<a class="code" href="structplateau.html#a6afaa60f594542e0d742b0c6d3223392">cases</a>[diag1];
<a name="l00395"></a>00395                         <span class="keywordtype">int</span> <a class="code" href="plateau_8h.html#a9e00f85b4b6ec2d8bdfbe94ff40f0eeeacab1e15e82c5976bfb476ddfe145263c">x</a> = cPrise.x - 1;
<a name="l00396"></a>00396                         <span class="keywordtype">int</span> y = cPrise.y - 1;
<a name="l00397"></a>00397                         <span class="keywordflow">while</span> (x &gt; 0 &amp;&amp; y &gt; 0 &amp;&amp; <a class="code" href="plateau_8h.html#a60a8f706865d0ae9087f8d65d4667655" title="retourne la case si elle existe, ou la case 0 sinon">get_case_plateau_silent</a>(x, y, p).est_libre) { <span class="comment">/* dans ce cas, on parcours les cases de la diagonale derrière la prise */</span>
<a name="l00398"></a>00398                                 <a class="code" href="structcoup.html" title="Objet coup. Un coup est défini par un numéro de case de départ, un numéro de case d&amp;#39;arrivée...">coup</a> cp = c;
<a name="l00399"></a>00399                                 cp.<a class="code" href="structcoup.html#ae19b3a66d3f4e66b8f69a38e4005f44a">prises</a>[cp.nombre_prises] = cPrise;
<a name="l00400"></a>00400                                 <a class="code" href="structcase__plateau.html" title="Objet case du plateau de jeu. Une case est définie par une couleur et, si elle est noire...">case_plateau</a> new_case = <a class="code" href="plateau_8h.html#a60a8f706865d0ae9087f8d65d4667655" title="retourne la case si elle existe, ou la case 0 sinon">get_case_plateau_silent</a>(x, y, p);
<a name="l00401"></a>00401                                 cp.nombre_prises++;
<a name="l00402"></a>00402                                 cp.<a class="code" href="structcoup.html#aa66b88eb8140c2f459ac92fad0796510">chemin</a>[cp.nombre_prises] = new_case;
<a name="l00403"></a>00403                                 cp.new_case = new_case.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>;
<a name="l00404"></a>00404                                 res[cpt_res++] = cp;
<a name="l00405"></a>00405                                 <span class="keywordflow">if</span> (!(get_possible_case_pos(new_case.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>, 2, p) <span class="comment">/* si il n&#39;y a pas d&#39;aures prises sur la diagonale, on ajoute le coup */</span>
<a name="l00406"></a>00406                                 || get_possible_case_pos(new_case.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>, 3, p))) {
<a name="l00407"></a>00407                                         p_futur = p;
<a name="l00408"></a>00408                                         plateau_prendre_pion(cPrise.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>, &amp;p_futur);
<a name="l00409"></a>00409                                         plateau_deplacer_pion(c.new_case,
<a name="l00410"></a>00410                                                         new_case.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>, &amp;p_futur);
<a name="l00411"></a>00411                                         <a class="code" href="structcoup.html" title="Objet coup. Un coup est défini par un numéro de case de départ, un numéro de case d&amp;#39;arrivée...">coup</a> * coups_completes =
<a name="l00412"></a>00412                                                         completer_coup_dame(cp, 1, p_futur);
<a name="l00413"></a>00413                                         <span class="keywordtype">int</span> nbCoups = nombre_coups(coups_completes);
<a name="l00414"></a>00414                                         <span class="keywordtype">int</span> i;
<a name="l00415"></a>00415                                         <span class="keywordflow">for</span> (i = 0; i &lt; nbCoups; i++) {
<a name="l00416"></a>00416                                                 res[cpt_res++] = coups_completes[i];
<a name="l00417"></a>00417                                         }
<a name="l00418"></a>00418                                 }
<a name="l00419"></a>00419                                 x--;
<a name="l00420"></a>00420                                 y--;
<a name="l00421"></a>00421                         }
<a name="l00422"></a>00422                 }
<a name="l00423"></a>00423                 <span class="keywordflow">if</span> (diag4) { <span class="comment">// si on peut prendre un pion sur la diagonale 3</span>
<a name="l00424"></a>00424                         <a class="code" href="structcase__plateau.html" title="Objet case du plateau de jeu. Une case est définie par une couleur et, si elle est noire...">case_plateau</a> cPrise = p.<a class="code" href="structplateau.html#a6afaa60f594542e0d742b0c6d3223392">cases</a>[diag4];
<a name="l00425"></a>00425                         <span class="keywordtype">int</span> <a class="code" href="plateau_8h.html#a9e00f85b4b6ec2d8bdfbe94ff40f0eeeacab1e15e82c5976bfb476ddfe145263c">x</a> = cPrise.x + 1;
<a name="l00426"></a>00426                         <span class="keywordtype">int</span> y = cPrise.y + 1;
<a name="l00427"></a>00427                         <span class="keywordflow">while</span> (x &lt;= 10 &amp;&amp; y &lt;= 10 &amp;&amp; <a class="code" href="plateau_8h.html#a60a8f706865d0ae9087f8d65d4667655" title="retourne la case si elle existe, ou la case 0 sinon">get_case_plateau_silent</a>(x, y, p).est_libre) { <span class="comment">/* dans ce cas, on parcours les cases de la diagonale derrière la prise */</span>
<a name="l00428"></a>00428                                 <a class="code" href="structcoup.html" title="Objet coup. Un coup est défini par un numéro de case de départ, un numéro de case d&amp;#39;arrivée...">coup</a> cp = c;
<a name="l00429"></a>00429                                 cp.<a class="code" href="structcoup.html#ae19b3a66d3f4e66b8f69a38e4005f44a">prises</a>[cp.nombre_prises] = cPrise;
<a name="l00430"></a>00430                                 <a class="code" href="structcase__plateau.html" title="Objet case du plateau de jeu. Une case est définie par une couleur et, si elle est noire...">case_plateau</a> new_case = <a class="code" href="plateau_8h.html#a60a8f706865d0ae9087f8d65d4667655" title="retourne la case si elle existe, ou la case 0 sinon">get_case_plateau_silent</a>(x, y, p);
<a name="l00431"></a>00431                                 cp.nombre_prises++;
<a name="l00432"></a>00432                                 cp.<a class="code" href="structcoup.html#aa66b88eb8140c2f459ac92fad0796510">chemin</a>[cp.nombre_prises] = new_case;
<a name="l00433"></a>00433                                 cp.new_case = new_case.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>;
<a name="l00434"></a>00434                                 res[cpt_res++] = cp;
<a name="l00435"></a>00435                                 <span class="keywordflow">if</span> (!(get_possible_case_pos(new_case.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>, 2, p) <span class="comment">/* si il n&#39;y a pas d&#39;aures prises sur la diagonale, on ajoute le coup */</span>
<a name="l00436"></a>00436                                 || get_possible_case_pos(new_case.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>, 3, p))) {
<a name="l00437"></a>00437                                         p_futur = p;
<a name="l00438"></a>00438                                         plateau_prendre_pion(cPrise.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>, &amp;p_futur);
<a name="l00439"></a>00439                                         plateau_deplacer_pion(c.new_case,
<a name="l00440"></a>00440                                                         new_case.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>, &amp;p_futur);
<a name="l00441"></a>00441                                         <a class="code" href="structcoup.html" title="Objet coup. Un coup est défini par un numéro de case de départ, un numéro de case d&amp;#39;arrivée...">coup</a> * coups_completes =
<a name="l00442"></a>00442                                                         completer_coup_dame(cp, 4, p_futur);
<a name="l00443"></a>00443                                         <span class="keywordtype">int</span> nbCoups = nombre_coups(coups_completes);
<a name="l00444"></a>00444                                         <span class="keywordtype">int</span> i;
<a name="l00445"></a>00445                                         <span class="keywordflow">for</span> (i = 0; i &lt; nbCoups; i++) {
<a name="l00446"></a>00446                                                 res[cpt_res++] = coups_completes[i];
<a name="l00447"></a>00447                                         }
<a name="l00448"></a>00448                                 }
<a name="l00449"></a>00449                                 x++;
<a name="l00450"></a>00450                                 y++;
<a name="l00451"></a>00451                         }
<a name="l00452"></a>00452                 }
<a name="l00453"></a>00453         }
<a name="l00454"></a>00454 
<a name="l00455"></a>00455         <a class="code" href="structcoup.html" title="Objet coup. Un coup est défini par un numéro de case de départ, un numéro de case d&amp;#39;arrivée...">coup</a> bidon;
<a name="l00456"></a>00456         bidon.old_case = 0;
<a name="l00457"></a>00457         bidon.new_case = 0;
<a name="l00458"></a>00458         res[cpt_res++] = bidon;
<a name="l00459"></a>00459 
<a name="l00460"></a>00460         <span class="keywordflow">return</span> res;
<a name="l00461"></a>00461 }
<a name="l00462"></a>00462 
<a name="l00467"></a>00467 <a class="code" href="structcoup.html" title="Objet coup. Un coup est défini par un numéro de case de départ, un numéro de case d&amp;#39;arrivée...">coup</a>* coupsPossiblesDames(<span class="keyword">const</span> <a class="code" href="structcase__plateau.html" title="Objet case du plateau de jeu. Une case est définie par une couleur et, si elle est noire...">case_plateau</a> c, <span class="keyword">const</span> <a class="code" href="structplateau.html" title="Objet plateau. Le plateau est composé de 50 cases, numérotées de 1 à 50. Il comporte un historique de...">plateau</a> p) {
<a name="l00468"></a>00468 
<a name="l00469"></a>00469         <a class="code" href="structcoup.html" title="Objet coup. Un coup est défini par un numéro de case de départ, un numéro de case d&amp;#39;arrivée...">coup</a> * cps = calloc(NBCOUPS, <span class="keyword">sizeof</span>(<a class="code" href="structcoup.html" title="Objet coup. Un coup est défini par un numéro de case de départ, un numéro de case d&amp;#39;arrivée...">coup</a>));
<a name="l00470"></a>00470         <a class="code" href="structplateau.html" title="Objet plateau. Le plateau est composé de 50 cases, numérotées de 1 à 50. Il comporte un historique de...">plateau</a> p_futur = p;
<a name="l00471"></a>00471         <span class="keywordtype">int</span> cnt_coup = 0;
<a name="l00472"></a>00472         <a class="code" href="structcase__plateau.html" title="Objet case du plateau de jeu. Une case est définie par une couleur et, si elle est noire...">case_plateau</a> case_courant = c;
<a name="l00473"></a>00473         <a class="code" href="plateau_8h.html#a8282be6127518547fa916dd6cfef17cb" title="La couleur d&amp;#39;un pion.">couleur_pion</a> adversaire = (c.pion.couleur == blanc) ? noir : blanc;
<a name="l00474"></a>00474         <a class="code" href="plateau_8h.html#a9e00f85b4b6ec2d8bdfbe94ff40f0eee" title="Le type de coup. Le &amp;quot;tiret&amp;quot; &amp;#39;-&amp;#39; est remplacé par un &amp;#39;t&amp;#39;.">type_coup</a> prise = <a class="code" href="plateau_8h.html#a9e00f85b4b6ec2d8bdfbe94ff40f0eeeacab1e15e82c5976bfb476ddfe145263c">x</a>;
<a name="l00475"></a>00475 
<a name="l00476"></a>00476         <span class="comment">/* conditions de départ */</span>
<a name="l00477"></a>00477         <a class="code" href="structcoup.html" title="Objet coup. Un coup est défini par un numéro de case de départ, un numéro de case d&amp;#39;arrivée...">coup</a> coup_courant;
<a name="l00478"></a>00478         coup_courant.old_case = case_courant.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>;
<a name="l00479"></a>00479         coup_courant.nombre_prises = 0;
<a name="l00480"></a>00480         coup_courant.<a class="code" href="structcoup.html#aa33da004dccb192cb33bc00c26c6e859">tc</a> = <a class="code" href="plateau_8h.html#a9e00f85b4b6ec2d8bdfbe94ff40f0eeeacab1e15e82c5976bfb476ddfe145263c">x</a>;
<a name="l00481"></a>00481         coup_courant.<a class="code" href="structcoup.html#aa66b88eb8140c2f459ac92fad0796510">chemin</a>[coup_courant.nombre_prises++] = case_courant;
<a name="l00482"></a>00482 
<a name="l00483"></a>00483         <span class="comment">/* pour signaler qu&#39;on est dans une rafle */</span>
<a name="l00484"></a>00484         <span class="keywordtype">int</span> nouvelle_rafle = 0;
<a name="l00485"></a>00485         <span class="keywordtype">int</span> derniere_recherche_faite = 0; <span class="comment">/* lorsqu&#39;on revient sur la case de départ, on fait une derniere recherche */</span>
<a name="l00486"></a>00486         <span class="keywordtype">int</span> fini = 0;
<a name="l00487"></a>00487         <span class="keywordtype">int</span> derniere_position = 0;
<a name="l00488"></a>00488 
<a name="l00489"></a>00489         <span class="comment">/* quand on est sur la case de départ on marque l&#39;element qu&#39;on va visiter</span>
<a name="l00490"></a>00490 <span class="comment">         * ainsi on ne reparcours pas une deuxieme fois quand on revient durant le backtrack</span>
<a name="l00491"></a>00491 <span class="comment">         */</span>
<a name="l00492"></a>00492         <a class="code" href="structcase__plateau.html" title="Objet case du plateau de jeu. Une case est définie par une couleur et, si elle est noire...">case_plateau</a> to_avoid[5];
<a name="l00493"></a>00493         <span class="keywordtype">int</span> cnt_avoid = 0;
<a name="l00494"></a>00494 
<a name="l00495"></a>00495         <span class="comment">/* ---------------------------------------------------------------------------</span>
<a name="l00496"></a>00496 <span class="comment">         * stratégie:</span>
<a name="l00497"></a>00497 <span class="comment">         *</span>
<a name="l00498"></a>00498 <span class="comment">         *                     |       |</span>
<a name="l00499"></a>00499 <span class="comment">         *         1   |       |   2                            On teste d&#39;abord les diagonales</span>
<a name="l00500"></a>00500 <span class="comment">         *              _______|_______|_______                         dans l&#39;ordre indiqué toujours</span>
<a name="l00501"></a>00501 <span class="comment">         *                     | case  |                                        par rapport à la case courante</span>
<a name="l00502"></a>00502 <span class="comment">         *             |courant|</span>
<a name="l00503"></a>00503 <span class="comment">         *              _______|_______|_______</span>
<a name="l00504"></a>00504 <span class="comment">         *                     |       |</span>
<a name="l00505"></a>00505 <span class="comment">         *                 3   |       |   4</span>
<a name="l00506"></a>00506 <span class="comment">         *             |       |</span>
<a name="l00507"></a>00507 <span class="comment">         *</span>
<a name="l00508"></a>00508 <span class="comment">         *</span>
<a name="l00509"></a>00509 <span class="comment">         *</span>
<a name="l00510"></a>00510 <span class="comment">         * ---------------------------------------------------------------------------</span>
<a name="l00511"></a>00511 <span class="comment">         */</span>
<a name="l00512"></a>00512 
<a name="l00513"></a>00513         <span class="keywordflow">while</span> (!fini) {
<a name="l00514"></a>00514                 <span class="comment">/* ---------------------- Diagonale 1 ----------------------------- */</span>
<a name="l00515"></a>00515                 <span class="keywordtype">int</span> case_prise = get_possible_case_pos(c.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>, 1, p);
<a name="l00516"></a>00516                 <a class="code" href="structcase__plateau.html" title="Objet case du plateau de jeu. Une case est définie par une couleur et, si elle est noire...">case_plateau</a> case_derriere = <a class="code" href="plateau_8h.html#a60a8f706865d0ae9087f8d65d4667655" title="retourne la case si elle existe, ou la case 0 sinon">get_case_plateau_silent</a>(
<a name="l00517"></a>00517                                 p.<a class="code" href="structplateau.html#a6afaa60f594542e0d742b0c6d3223392">cases</a>[case_prise].x - 1, p.<a class="code" href="structplateau.html#a6afaa60f594542e0d742b0c6d3223392">cases</a>[case_prise].y - 1, p);
<a name="l00518"></a>00518                 <span class="keywordflow">if</span> (!case_prise || !case_derriere.<a class="code" href="structcase__plateau.html#a173f25d2fd7c653d77ca8174ba4f636d">est_libre</a>
<a name="l00519"></a>00519                                 || case_derriere.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a> == 0) { <span class="comment">/* si la diagonale est vide, ou qu&#39;on ne peut pas prendre le pion */</span>
<a name="l00520"></a>00520                         <span class="keywordtype">int</span> <a class="code" href="plateau_8h.html#a9e00f85b4b6ec2d8bdfbe94ff40f0eeeacab1e15e82c5976bfb476ddfe145263c">x</a> = c.x - 1;
<a name="l00521"></a>00521                         <span class="keywordtype">int</span> y = c.y - 1;
<a name="l00522"></a>00522                         <span class="keywordflow">while</span> (x &gt; 0 &amp;&amp; y &gt; 0 &amp;&amp; <a class="code" href="plateau_8h.html#a60a8f706865d0ae9087f8d65d4667655" title="retourne la case si elle existe, ou la case 0 sinon">get_case_plateau_silent</a>(x, y, p).est_libre) { <span class="comment">/* on parcours la diagonale jusqu&#39;au bout ou jusqu&#39;a rencontrer un autre pion. */</span>
<a name="l00523"></a>00523                                 <a class="code" href="structcase__plateau.html" title="Objet case du plateau de jeu. Une case est définie par une couleur et, si elle est noire...">case_plateau</a> new_case = <a class="code" href="plateau_8h.html#a60a8f706865d0ae9087f8d65d4667655" title="retourne la case si elle existe, ou la case 0 sinon">get_case_plateau_silent</a>(x, y, p);
<a name="l00524"></a>00524                                 <span class="keywordflow">if</span> (new_case.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a> != 0) {
<a name="l00525"></a>00525                                         <a class="code" href="structcoup.html" title="Objet coup. Un coup est défini par un numéro de case de départ, un numéro de case d&amp;#39;arrivée...">coup</a> cp;
<a name="l00526"></a>00526                                         cp.<a class="code" href="structcoup.html#aa33da004dccb192cb33bc00c26c6e859">tc</a> = <span class="charliteral">&#39;-&#39;</span>;
<a name="l00527"></a>00527                                         cp.old_case = c.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>;
<a name="l00528"></a>00528                                         cp.nombre_prises = 0;
<a name="l00529"></a>00529                                         cp.new_case = new_case.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>;
<a name="l00530"></a>00530                                         cps[cnt_coup++] = cp; <span class="comment">/* on ajoute tous les coups à la liste */</span>
<a name="l00531"></a>00531                                 }
<a name="l00532"></a>00532                                 x--;
<a name="l00533"></a>00533                                 y--;
<a name="l00534"></a>00534                         }
<a name="l00535"></a>00535 
<a name="l00536"></a>00536                 } <span class="keywordflow">else</span> { <span class="comment">/* sinon, il y a un pion à prendre sur la diagonale */</span>
<a name="l00537"></a>00537                         <a class="code" href="structcase__plateau.html" title="Objet case du plateau de jeu. Une case est définie par une couleur et, si elle est noire...">case_plateau</a> cPrise = p.<a class="code" href="structplateau.html#a6afaa60f594542e0d742b0c6d3223392">cases</a>[case_prise];
<a name="l00538"></a>00538                         <span class="keywordtype">int</span> x = cPrise.x - 1;
<a name="l00539"></a>00539                         <span class="keywordtype">int</span> y = cPrise.y - 1;
<a name="l00540"></a>00540                         <span class="keywordflow">while</span> (x &gt; 0 &amp;&amp; y &gt; 0 &amp;&amp; <a class="code" href="plateau_8h.html#a60a8f706865d0ae9087f8d65d4667655" title="retourne la case si elle existe, ou la case 0 sinon">get_case_plateau_silent</a>(x, y, p).est_libre) { <span class="comment">/* dans ce cas, on parcours les cases de la diagonale derrière la prise */</span>
<a name="l00541"></a>00541                                 <a class="code" href="structcoup.html" title="Objet coup. Un coup est défini par un numéro de case de départ, un numéro de case d&amp;#39;arrivée...">coup</a> cp;
<a name="l00542"></a>00542                                 cp.<a class="code" href="structcoup.html#aa33da004dccb192cb33bc00c26c6e859">tc</a> = prise;
<a name="l00543"></a>00543                                 cp.old_case = c.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>;
<a name="l00544"></a>00544                                 cp.nombre_prises = 1;
<a name="l00545"></a>00545                                 cp.<a class="code" href="structcoup.html#ae19b3a66d3f4e66b8f69a38e4005f44a">prises</a>[0] = cPrise;
<a name="l00546"></a>00546                                 <a class="code" href="structcase__plateau.html" title="Objet case du plateau de jeu. Une case est définie par une couleur et, si elle est noire...">case_plateau</a> new_case = <a class="code" href="plateau_8h.html#a60a8f706865d0ae9087f8d65d4667655" title="retourne la case si elle existe, ou la case 0 sinon">get_case_plateau_silent</a>(x, y, p);
<a name="l00547"></a>00547                                 cp.<a class="code" href="structcoup.html#aa66b88eb8140c2f459ac92fad0796510">chemin</a>[0] = c;
<a name="l00548"></a>00548                                 cp.<a class="code" href="structcoup.html#aa66b88eb8140c2f459ac92fad0796510">chemin</a>[1] = new_case;
<a name="l00549"></a>00549                                 cp.new_case = new_case.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>;
<a name="l00550"></a>00550 
<a name="l00551"></a>00551                                 p_futur = p;
<a name="l00552"></a>00552                                 plateau_prendre_pion(cPrise.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>, &amp;p_futur);
<a name="l00553"></a>00553                                 plateau_deplacer_pion(c.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>,
<a name="l00554"></a>00554                                                 new_case.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>, &amp;p_futur);
<a name="l00555"></a>00555 
<a name="l00556"></a>00556                                 cps[cnt_coup++] = cp;
<a name="l00557"></a>00557 
<a name="l00558"></a>00558                                 <span class="keywordflow">if</span> (get_possible_case_pos(new_case.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>, 2,
<a name="l00559"></a>00559                                                 p_futur) || get_possible_case_pos(
<a name="l00560"></a>00560                                                 new_case.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>, 3, p_futur)) { <span class="comment">/* si il y a une prise possible sur la diagonale, on l&#39;ajoute à la liste */</span>
<a name="l00561"></a>00561                                         <a class="code" href="structcoup.html" title="Objet coup. Un coup est défini par un numéro de case de départ, un numéro de case d&amp;#39;arrivée...">coup</a> * coups_completes =
<a name="l00562"></a>00562                                                         completer_coup_dame(cp, 1, p_futur);
<a name="l00563"></a>00563 
<a name="l00564"></a>00564                                         <span class="keywordtype">int</span> nbCoups = nombre_coups(coups_completes);
<a name="l00565"></a>00565                                         <span class="keywordtype">int</span> i;
<a name="l00566"></a>00566                                         <span class="keywordflow">for</span> (i = 0; i &lt; nbCoups; i++) {
<a name="l00567"></a>00567                                                 cps[cnt_coup++] = coups_completes[i];
<a name="l00568"></a>00568                                         }
<a name="l00569"></a>00569                                         free(coups_completes);
<a name="l00570"></a>00570                                 }
<a name="l00571"></a>00571                                 x--;
<a name="l00572"></a>00572                                 y--;
<a name="l00573"></a>00573                         }
<a name="l00574"></a>00574                 }
<a name="l00575"></a>00575 
<a name="l00576"></a>00576                 <span class="comment">/* ---------------------- Diagonale 2 ----------------------------- */</span>
<a name="l00577"></a>00577 
<a name="l00578"></a>00578                 case_prise = get_possible_case_pos(c.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>, 2, p);
<a name="l00579"></a>00579                 case_derriere = <a class="code" href="plateau_8h.html#a60a8f706865d0ae9087f8d65d4667655" title="retourne la case si elle existe, ou la case 0 sinon">get_case_plateau_silent</a>(p.<a class="code" href="structplateau.html#a6afaa60f594542e0d742b0c6d3223392">cases</a>[case_prise].x + 1,
<a name="l00580"></a>00580                                 p.<a class="code" href="structplateau.html#a6afaa60f594542e0d742b0c6d3223392">cases</a>[case_prise].y - 1, p);
<a name="l00581"></a>00581                 <span class="keywordflow">if</span> (!case_prise || !case_derriere.<a class="code" href="structcase__plateau.html#a173f25d2fd7c653d77ca8174ba4f636d">est_libre</a>
<a name="l00582"></a>00582                                 || case_derriere.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a> == 0) { <span class="comment">/* si la diagonale est vide */</span>
<a name="l00583"></a>00583                         <span class="keywordtype">int</span> x = c.x + 1;
<a name="l00584"></a>00584                         <span class="keywordtype">int</span> y = c.y - 1;
<a name="l00585"></a>00585                         <span class="keywordflow">while</span> (x &lt;= 10 &amp;&amp; y &gt; 0 &amp;&amp; <a class="code" href="plateau_8h.html#a60a8f706865d0ae9087f8d65d4667655" title="retourne la case si elle existe, ou la case 0 sinon">get_case_plateau_silent</a>(x, y, p).est_libre) { <span class="comment">/* on parcours la diagonale jusqu&#39;au bout ou jusqu&#39;a rencontrer un autre pion. */</span>
<a name="l00586"></a>00586                                 <a class="code" href="structcase__plateau.html" title="Objet case du plateau de jeu. Une case est définie par une couleur et, si elle est noire...">case_plateau</a> new_case = <a class="code" href="plateau_8h.html#a60a8f706865d0ae9087f8d65d4667655" title="retourne la case si elle existe, ou la case 0 sinon">get_case_plateau_silent</a>(x, y, p);
<a name="l00587"></a>00587                                 <span class="keywordflow">if</span> (new_case.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a> != 0) {
<a name="l00588"></a>00588                                         <a class="code" href="structcoup.html" title="Objet coup. Un coup est défini par un numéro de case de départ, un numéro de case d&amp;#39;arrivée...">coup</a> cp;
<a name="l00589"></a>00589                                         cp.<a class="code" href="structcoup.html#aa33da004dccb192cb33bc00c26c6e859">tc</a> = <span class="charliteral">&#39;-&#39;</span>;
<a name="l00590"></a>00590                                         cp.old_case = c.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>;
<a name="l00591"></a>00591                                         cp.nombre_prises = 0;
<a name="l00592"></a>00592                                         cp.new_case = new_case.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>;
<a name="l00593"></a>00593                                         cps[cnt_coup++] = cp; <span class="comment">/* on ajoute tous les coups à la liste */</span>
<a name="l00594"></a>00594                                 }
<a name="l00595"></a>00595                                 x++;
<a name="l00596"></a>00596                                 y--;
<a name="l00597"></a>00597                         }
<a name="l00598"></a>00598 
<a name="l00599"></a>00599                 } <span class="keywordflow">else</span> { <span class="comment">/* sinon, il y a un pion à prendre sur la diagonale */</span>
<a name="l00600"></a>00600                         <a class="code" href="structcase__plateau.html" title="Objet case du plateau de jeu. Une case est définie par une couleur et, si elle est noire...">case_plateau</a> cPrise = p.<a class="code" href="structplateau.html#a6afaa60f594542e0d742b0c6d3223392">cases</a>[case_prise];
<a name="l00601"></a>00601                         <span class="keywordtype">int</span> x = cPrise.x + 1;
<a name="l00602"></a>00602                         <span class="keywordtype">int</span> y = cPrise.y - 1;
<a name="l00603"></a>00603                         <span class="keywordflow">while</span> (x &lt;= 10 &amp;&amp; y &gt; 0 &amp;&amp; <a class="code" href="plateau_8h.html#a60a8f706865d0ae9087f8d65d4667655" title="retourne la case si elle existe, ou la case 0 sinon">get_case_plateau_silent</a>(x, y, p).est_libre) { <span class="comment">/* dans ce cas, on parcours les cases de la diagonale derrière la prise */</span>
<a name="l00604"></a>00604                                 <a class="code" href="structcoup.html" title="Objet coup. Un coup est défini par un numéro de case de départ, un numéro de case d&amp;#39;arrivée...">coup</a> cp;
<a name="l00605"></a>00605                                 cp.<a class="code" href="structcoup.html#aa33da004dccb192cb33bc00c26c6e859">tc</a> = prise;
<a name="l00606"></a>00606                                 cp.old_case = c.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>;
<a name="l00607"></a>00607                                 cp.nombre_prises = 1;
<a name="l00608"></a>00608                                 cp.<a class="code" href="structcoup.html#ae19b3a66d3f4e66b8f69a38e4005f44a">prises</a>[0] = cPrise;
<a name="l00609"></a>00609                                 <a class="code" href="structcase__plateau.html" title="Objet case du plateau de jeu. Une case est définie par une couleur et, si elle est noire...">case_plateau</a> new_case = <a class="code" href="plateau_8h.html#a60a8f706865d0ae9087f8d65d4667655" title="retourne la case si elle existe, ou la case 0 sinon">get_case_plateau_silent</a>(x, y, p);
<a name="l00610"></a>00610                                 cp.<a class="code" href="structcoup.html#aa66b88eb8140c2f459ac92fad0796510">chemin</a>[0] = c;
<a name="l00611"></a>00611                                 cp.<a class="code" href="structcoup.html#aa66b88eb8140c2f459ac92fad0796510">chemin</a>[1] = new_case;
<a name="l00612"></a>00612                                 cp.new_case = new_case.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>;
<a name="l00613"></a>00613 
<a name="l00614"></a>00614                                 p_futur = p;
<a name="l00615"></a>00615                                 plateau_prendre_pion(cPrise.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>, &amp;p_futur);
<a name="l00616"></a>00616                                 plateau_deplacer_pion(c.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>,
<a name="l00617"></a>00617                                                 new_case.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>, &amp;p_futur);
<a name="l00618"></a>00618                                 cps[cnt_coup++] = cp;
<a name="l00619"></a>00619 
<a name="l00620"></a>00620                                 <span class="keywordflow">if</span> (get_possible_case_pos(new_case.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>, 1,
<a name="l00621"></a>00621                                                 p_futur) || get_possible_case_pos(
<a name="l00622"></a>00622                                                 new_case.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>, 4, p_futur)) {
<a name="l00623"></a>00623 
<a name="l00624"></a>00624                                         <a class="code" href="structcoup.html" title="Objet coup. Un coup est défini par un numéro de case de départ, un numéro de case d&amp;#39;arrivée...">coup</a> * coups_completes =
<a name="l00625"></a>00625                                                         completer_coup_dame(cp, 2, p_futur);
<a name="l00626"></a>00626 
<a name="l00627"></a>00627                                         <span class="keywordtype">int</span> nbCoups = nombre_coups(coups_completes);
<a name="l00628"></a>00628                                         <span class="keywordtype">int</span> i;
<a name="l00629"></a>00629                                         <span class="keywordflow">for</span> (i = 0; i &lt; nbCoups; i++) {
<a name="l00630"></a>00630                                                 cps[cnt_coup++] = coups_completes[i];
<a name="l00631"></a>00631                                         }
<a name="l00632"></a>00632                                         free(coups_completes);
<a name="l00633"></a>00633                                 }
<a name="l00634"></a>00634                                 x++;
<a name="l00635"></a>00635                                 y--;
<a name="l00636"></a>00636                         }
<a name="l00637"></a>00637                 }
<a name="l00638"></a>00638 
<a name="l00639"></a>00639                 <span class="comment">/* ---------------------- Diagonale 3 ----------------------------- */</span>
<a name="l00640"></a>00640 
<a name="l00641"></a>00641                 case_prise = get_possible_case_pos(c.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>, 3, p);
<a name="l00642"></a>00642                 case_derriere = <a class="code" href="plateau_8h.html#a60a8f706865d0ae9087f8d65d4667655" title="retourne la case si elle existe, ou la case 0 sinon">get_case_plateau_silent</a>(p.<a class="code" href="structplateau.html#a6afaa60f594542e0d742b0c6d3223392">cases</a>[case_prise].x - 1,
<a name="l00643"></a>00643                                 p.<a class="code" href="structplateau.html#a6afaa60f594542e0d742b0c6d3223392">cases</a>[case_prise].y + 1, p);
<a name="l00644"></a>00644                 <span class="keywordflow">if</span> (!case_prise || !case_derriere.<a class="code" href="structcase__plateau.html#a173f25d2fd7c653d77ca8174ba4f636d">est_libre</a>
<a name="l00645"></a>00645                                 || case_derriere.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a> == 0) { <span class="comment">/* si la diagonale est vide */</span>
<a name="l00646"></a>00646                         <span class="keywordtype">int</span> x = c.x - 1;
<a name="l00647"></a>00647                         <span class="keywordtype">int</span> y = c.y + 1;
<a name="l00648"></a>00648                         <span class="keywordflow">while</span> (x &gt; 0 &amp;&amp; y &lt;= 10 &amp;&amp; <a class="code" href="plateau_8h.html#a60a8f706865d0ae9087f8d65d4667655" title="retourne la case si elle existe, ou la case 0 sinon">get_case_plateau_silent</a>(x, y, p).est_libre) { <span class="comment">/* on parcours la diagonale jusqu&#39;au bout ou jusqu&#39;a rencontrer un autre pion. */</span>
<a name="l00649"></a>00649                                 <a class="code" href="structcase__plateau.html" title="Objet case du plateau de jeu. Une case est définie par une couleur et, si elle est noire...">case_plateau</a> new_case = <a class="code" href="plateau_8h.html#a60a8f706865d0ae9087f8d65d4667655" title="retourne la case si elle existe, ou la case 0 sinon">get_case_plateau_silent</a>(x, y, p);
<a name="l00650"></a>00650                                 <span class="keywordflow">if</span> (new_case.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a> != 0) {
<a name="l00651"></a>00651                                         <a class="code" href="structcoup.html" title="Objet coup. Un coup est défini par un numéro de case de départ, un numéro de case d&amp;#39;arrivée...">coup</a> cp;
<a name="l00652"></a>00652                                         cp.<a class="code" href="structcoup.html#aa33da004dccb192cb33bc00c26c6e859">tc</a> = <span class="charliteral">&#39;-&#39;</span>;
<a name="l00653"></a>00653                                         cp.old_case = c.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>;
<a name="l00654"></a>00654                                         cp.nombre_prises = 0;
<a name="l00655"></a>00655                                         cp.new_case = new_case.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>;
<a name="l00656"></a>00656                                         cps[cnt_coup++] = cp; <span class="comment">/* on ajoute tous les coups à la liste */</span>
<a name="l00657"></a>00657                                 }
<a name="l00658"></a>00658                                 x--;
<a name="l00659"></a>00659                                 y++;
<a name="l00660"></a>00660                         }
<a name="l00661"></a>00661 
<a name="l00662"></a>00662                 } <span class="keywordflow">else</span> { <span class="comment">/* sinon, il y a un pion à prendre sur la diagonale */</span>
<a name="l00663"></a>00663                         <a class="code" href="structcase__plateau.html" title="Objet case du plateau de jeu. Une case est définie par une couleur et, si elle est noire...">case_plateau</a> cPrise = p.<a class="code" href="structplateau.html#a6afaa60f594542e0d742b0c6d3223392">cases</a>[case_prise];
<a name="l00664"></a>00664                         <span class="keywordtype">int</span> x = cPrise.x - 1;
<a name="l00665"></a>00665                         <span class="keywordtype">int</span> y = cPrise.y + 1;
<a name="l00666"></a>00666                         <span class="keywordflow">while</span> (x &gt; 0 &amp;&amp; y &lt;= 10 &amp;&amp; <a class="code" href="plateau_8h.html#a60a8f706865d0ae9087f8d65d4667655" title="retourne la case si elle existe, ou la case 0 sinon">get_case_plateau_silent</a>(x, y, p).est_libre) { <span class="comment">/* dans ce cas, on parcours les cases de la diagonale derrière la prise */</span>
<a name="l00667"></a>00667                                 <a class="code" href="structcoup.html" title="Objet coup. Un coup est défini par un numéro de case de départ, un numéro de case d&amp;#39;arrivée...">coup</a> cp;
<a name="l00668"></a>00668                                 cp.<a class="code" href="structcoup.html#aa33da004dccb192cb33bc00c26c6e859">tc</a> = prise;
<a name="l00669"></a>00669                                 cp.old_case = c.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>;
<a name="l00670"></a>00670                                 cp.nombre_prises = 1;
<a name="l00671"></a>00671                                 cp.<a class="code" href="structcoup.html#ae19b3a66d3f4e66b8f69a38e4005f44a">prises</a>[0] = cPrise;
<a name="l00672"></a>00672                                 <a class="code" href="structcase__plateau.html" title="Objet case du plateau de jeu. Une case est définie par une couleur et, si elle est noire...">case_plateau</a> new_case = <a class="code" href="plateau_8h.html#a60a8f706865d0ae9087f8d65d4667655" title="retourne la case si elle existe, ou la case 0 sinon">get_case_plateau_silent</a>(x, y, p);
<a name="l00673"></a>00673                                 cp.<a class="code" href="structcoup.html#aa66b88eb8140c2f459ac92fad0796510">chemin</a>[0] = c;
<a name="l00674"></a>00674                                 cp.<a class="code" href="structcoup.html#aa66b88eb8140c2f459ac92fad0796510">chemin</a>[1] = new_case;
<a name="l00675"></a>00675                                 cp.new_case = new_case.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>;
<a name="l00676"></a>00676 
<a name="l00677"></a>00677                                 p_futur = p;
<a name="l00678"></a>00678                                 plateau_prendre_pion(cPrise.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>, &amp;p_futur);
<a name="l00679"></a>00679                                 plateau_deplacer_pion(c.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>,
<a name="l00680"></a>00680                                                 new_case.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>, &amp;p_futur);
<a name="l00681"></a>00681                                 cps[cnt_coup++] = cp;
<a name="l00682"></a>00682 
<a name="l00683"></a>00683                                 <span class="keywordflow">if</span> (get_possible_case_pos(new_case.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>, 1,
<a name="l00684"></a>00684                                                 p_futur) || get_possible_case_pos(
<a name="l00685"></a>00685                                                 new_case.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>, 4, p_futur)) {
<a name="l00686"></a>00686                                         <a class="code" href="structcoup.html" title="Objet coup. Un coup est défini par un numéro de case de départ, un numéro de case d&amp;#39;arrivée...">coup</a> * coups_completes =
<a name="l00687"></a>00687                                                         completer_coup_dame(cp, 3, p_futur);
<a name="l00688"></a>00688 
<a name="l00689"></a>00689                                         <span class="keywordtype">int</span> nbCoups = nombre_coups(coups_completes);
<a name="l00690"></a>00690                                         <span class="keywordtype">int</span> i;
<a name="l00691"></a>00691                                         <span class="keywordflow">for</span> (i = 0; i &lt; nbCoups; i++) {
<a name="l00692"></a>00692                                                 cps[cnt_coup++] = coups_completes[i];
<a name="l00693"></a>00693                                         }
<a name="l00694"></a>00694                                         free(coups_completes);
<a name="l00695"></a>00695                                 }
<a name="l00696"></a>00696                                 x--;
<a name="l00697"></a>00697                                 y++;
<a name="l00698"></a>00698                         }
<a name="l00699"></a>00699                 }
<a name="l00700"></a>00700 
<a name="l00701"></a>00701                 <span class="comment">/* ---------------------- Diagonale 4 ----------------------------- */</span>
<a name="l00702"></a>00702 
<a name="l00703"></a>00703                 case_prise = get_possible_case_pos(c.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>, 4, p);
<a name="l00704"></a>00704                 case_derriere = <a class="code" href="plateau_8h.html#a60a8f706865d0ae9087f8d65d4667655" title="retourne la case si elle existe, ou la case 0 sinon">get_case_plateau_silent</a>(p.<a class="code" href="structplateau.html#a6afaa60f594542e0d742b0c6d3223392">cases</a>[case_prise].x + 1,
<a name="l00705"></a>00705                                 p.<a class="code" href="structplateau.html#a6afaa60f594542e0d742b0c6d3223392">cases</a>[case_prise].y + 1, p);
<a name="l00706"></a>00706                 <span class="keywordflow">if</span> (!case_prise || !case_derriere.<a class="code" href="structcase__plateau.html#a173f25d2fd7c653d77ca8174ba4f636d">est_libre</a>
<a name="l00707"></a>00707                                 || case_derriere.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a> == 0) { <span class="comment">/* si la diagonale est vide */</span>
<a name="l00708"></a>00708                         <span class="keywordtype">int</span> x = c.x + 1;
<a name="l00709"></a>00709                         <span class="keywordtype">int</span> y = c.y + 1;
<a name="l00710"></a>00710                         <span class="keywordflow">while</span> (x &lt;= 10 &amp;&amp; y &lt;= 10 &amp;&amp; <a class="code" href="plateau_8h.html#a60a8f706865d0ae9087f8d65d4667655" title="retourne la case si elle existe, ou la case 0 sinon">get_case_plateau_silent</a>(x, y, p).est_libre) { <span class="comment">/* on parcours la diagonale jusqu&#39;au bout ou jusqu&#39;a rencontrer un autre pion. */</span>
<a name="l00711"></a>00711                                 <a class="code" href="structcase__plateau.html" title="Objet case du plateau de jeu. Une case est définie par une couleur et, si elle est noire...">case_plateau</a> new_case = <a class="code" href="plateau_8h.html#a60a8f706865d0ae9087f8d65d4667655" title="retourne la case si elle existe, ou la case 0 sinon">get_case_plateau_silent</a>(x, y, p);
<a name="l00712"></a>00712                                 <span class="keywordflow">if</span> (new_case.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a> != 0) {
<a name="l00713"></a>00713                                         <a class="code" href="structcoup.html" title="Objet coup. Un coup est défini par un numéro de case de départ, un numéro de case d&amp;#39;arrivée...">coup</a> cp;
<a name="l00714"></a>00714                                         cp.<a class="code" href="structcoup.html#aa33da004dccb192cb33bc00c26c6e859">tc</a> = <span class="charliteral">&#39;-&#39;</span>;
<a name="l00715"></a>00715                                         cp.old_case = c.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>;
<a name="l00716"></a>00716                                         cp.nombre_prises = 0;
<a name="l00717"></a>00717                                         cp.new_case = new_case.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>;
<a name="l00718"></a>00718                                         cps[cnt_coup++] = cp; <span class="comment">/* on ajoute tous les coups à la liste */</span>
<a name="l00719"></a>00719                                 }
<a name="l00720"></a>00720                                 x++;
<a name="l00721"></a>00721                                 y++;
<a name="l00722"></a>00722                         }
<a name="l00723"></a>00723 
<a name="l00724"></a>00724                 } <span class="keywordflow">else</span> { <span class="comment">/* sinon, il y a un pion à prendre sur la diagonale */</span>
<a name="l00725"></a>00725                         <a class="code" href="structcase__plateau.html" title="Objet case du plateau de jeu. Une case est définie par une couleur et, si elle est noire...">case_plateau</a> cPrise = p.<a class="code" href="structplateau.html#a6afaa60f594542e0d742b0c6d3223392">cases</a>[case_prise];
<a name="l00726"></a>00726                         <span class="keywordtype">int</span> x = cPrise.x + 1;
<a name="l00727"></a>00727                         <span class="keywordtype">int</span> y = cPrise.y + 1;
<a name="l00728"></a>00728                         <span class="keywordflow">while</span> (x &lt;= 10 &amp;&amp; y &lt;= 10 &amp;&amp; <a class="code" href="plateau_8h.html#a60a8f706865d0ae9087f8d65d4667655" title="retourne la case si elle existe, ou la case 0 sinon">get_case_plateau_silent</a>(x, y, p).est_libre) { <span class="comment">/* dans ce cas, on parcours les cases de la diagonale derrière la prise */</span>
<a name="l00729"></a>00729                                 <a class="code" href="structcoup.html" title="Objet coup. Un coup est défini par un numéro de case de départ, un numéro de case d&amp;#39;arrivée...">coup</a> cp;
<a name="l00730"></a>00730                                 cp.<a class="code" href="structcoup.html#aa33da004dccb192cb33bc00c26c6e859">tc</a> = prise;
<a name="l00731"></a>00731                                 cp.old_case = c.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>;
<a name="l00732"></a>00732                                 cp.nombre_prises = 1;
<a name="l00733"></a>00733                                 cp.<a class="code" href="structcoup.html#ae19b3a66d3f4e66b8f69a38e4005f44a">prises</a>[0] = cPrise;
<a name="l00734"></a>00734                                 <a class="code" href="structcase__plateau.html" title="Objet case du plateau de jeu. Une case est définie par une couleur et, si elle est noire...">case_plateau</a> new_case = <a class="code" href="plateau_8h.html#a60a8f706865d0ae9087f8d65d4667655" title="retourne la case si elle existe, ou la case 0 sinon">get_case_plateau_silent</a>(x, y, p);
<a name="l00735"></a>00735                                 cp.<a class="code" href="structcoup.html#aa66b88eb8140c2f459ac92fad0796510">chemin</a>[0] = c;
<a name="l00736"></a>00736                                 cp.<a class="code" href="structcoup.html#aa66b88eb8140c2f459ac92fad0796510">chemin</a>[1] = new_case;
<a name="l00737"></a>00737                                 cp.new_case = new_case.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>;
<a name="l00738"></a>00738 
<a name="l00739"></a>00739                                 p_futur = p;
<a name="l00740"></a>00740                                 plateau_prendre_pion(cPrise.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>, &amp;p_futur);
<a name="l00741"></a>00741                                 plateau_deplacer_pion(c.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>,
<a name="l00742"></a>00742                                                 new_case.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>, &amp;p_futur);
<a name="l00743"></a>00743                                 cps[cnt_coup++] = cp;
<a name="l00744"></a>00744 
<a name="l00745"></a>00745                                 <span class="keywordflow">if</span> (get_possible_case_pos(new_case.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>, 2,
<a name="l00746"></a>00746                                                 p_futur) || get_possible_case_pos(
<a name="l00747"></a>00747                                                 new_case.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>, 3, p_futur)) { <span class="comment">/* si il y a d&#39;aures prises sur la diagonale */</span>
<a name="l00748"></a>00748                                         <a class="code" href="structcoup.html" title="Objet coup. Un coup est défini par un numéro de case de départ, un numéro de case d&amp;#39;arrivée...">coup</a> * coups_completes =
<a name="l00749"></a>00749                                                         completer_coup_dame(cp, 4, p_futur);
<a name="l00750"></a>00750 
<a name="l00751"></a>00751                                         <span class="keywordtype">int</span> nbCoups = nombre_coups(coups_completes);
<a name="l00752"></a>00752                                         <span class="keywordtype">int</span> i;
<a name="l00753"></a>00753                                         <span class="keywordflow">for</span> (i = 0; i &lt; nbCoups; i++) {
<a name="l00754"></a>00754                                                 cps[cnt_coup++] = coups_completes[i];
<a name="l00755"></a>00755                                         }
<a name="l00756"></a>00756                                         free(coups_completes);
<a name="l00757"></a>00757                                 }
<a name="l00758"></a>00758                                 x++;
<a name="l00759"></a>00759                                 y++;
<a name="l00760"></a>00760                         }
<a name="l00761"></a>00761                 }
<a name="l00762"></a>00762 
<a name="l00763"></a>00763                 fini = 1;
<a name="l00764"></a>00764         }
<a name="l00765"></a>00765 
<a name="l00766"></a>00766         <span class="comment">//free(deplacements);</span>
<a name="l00767"></a>00767 
<a name="l00768"></a>00768         <span class="comment">/* pour marquer la fin de tableau */</span>
<a name="l00769"></a>00769         <a class="code" href="structcoup.html" title="Objet coup. Un coup est défini par un numéro de case de départ, un numéro de case d&amp;#39;arrivée...">coup</a> bidon;
<a name="l00770"></a>00770         bidon.old_case = 0;
<a name="l00771"></a>00771         bidon.new_case = 0;
<a name="l00772"></a>00772         cps[cnt_coup++] = bidon;
<a name="l00773"></a>00773         <span class="keywordflow">return</span> cps;
<a name="l00774"></a>00774 }
<a name="l00775"></a>00775 
<a name="l00776"></a>00776 <span class="comment">/* retourne les coups possibles de tout les pions */</span>
<a name="l00777"></a><a class="code" href="regles_8h.html#a7c5456f7077282f58fc370d432ecdf73">00777</a> <a class="code" href="structcoup.html" title="Objet coup. Un coup est défini par un numéro de case de départ, un numéro de case d&amp;#39;arrivée...">coup</a>* getCoups(<span class="keyword">const</span> <a class="code" href="structjoueur.html" title="Objet joueur. Un joueur est caractérisé par la couleur qu&amp;#39;il joue et sa nature (humain ou intelli...">joueur</a> j, <span class="keyword">const</span> <a class="code" href="structplateau.html" title="Objet plateau. Le plateau est composé de 50 cases, numérotées de 1 à 50. Il comporte un historique de...">plateau</a> p) {
<a name="l00778"></a>00778 
<a name="l00779"></a>00779         <span class="comment">//coup cp[500];</span>
<a name="l00780"></a>00780         <a class="code" href="structcoup.html" title="Objet coup. Un coup est défini par un numéro de case de départ, un numéro de case d&amp;#39;arrivée...">coup</a> *cp = calloc(500, <span class="keyword">sizeof</span>(<a class="code" href="structcoup.html" title="Objet coup. Un coup est défini par un numéro de case de départ, un numéro de case d&amp;#39;arrivée...">coup</a>));
<a name="l00781"></a>00781 
<a name="l00782"></a>00782         <a class="code" href="structcase__plateau.html" title="Objet case du plateau de jeu. Une case est définie par une couleur et, si elle est noire...">case_plateau</a> c;
<a name="l00783"></a>00783         <span class="keywordtype">int</span> cnt_coup = 0;
<a name="l00784"></a>00784         <span class="keywordtype">int</span> i;
<a name="l00785"></a>00785         <span class="keywordtype">int</span> k = 0;
<a name="l00786"></a>00786         <span class="comment">/* j&#39;itere sur toutes les cases du plateau */</span>
<a name="l00787"></a>00787         <span class="keywordflow">for</span> (i = 1; i &lt; 51; i++) {
<a name="l00788"></a>00788                 c = p.<a class="code" href="structplateau.html#a6afaa60f594542e0d742b0c6d3223392">cases</a>[i];
<a name="l00789"></a>00789                 <span class="comment">/* si dans cette case y&#39;a un pion du joueur j</span>
<a name="l00790"></a>00790 <span class="comment">                 * on recupere tout les coups possibles de ce pion</span>
<a name="l00791"></a>00791 <span class="comment">                 */</span>
<a name="l00792"></a>00792                 <span class="keywordflow">if</span> ((!c.<a class="code" href="structcase__plateau.html#a173f25d2fd7c653d77ca8174ba4f636d">est_libre</a>) &amp;&amp; (c.pion.couleur == j.<a class="code" href="structjoueur.html#a057f95a41503a890f27c651969ffac8d">couleur</a>)) {
<a name="l00793"></a>00793                         <a class="code" href="structcoup.html" title="Objet coup. Un coup est défini par un numéro de case de départ, un numéro de case d&amp;#39;arrivée...">coup</a> * aAjouter;
<a name="l00794"></a>00794                         <span class="keywordflow">if</span> (c.pion.<a class="code" href="structpion.html#a13d497ed763d6eba18df86caf4c85861">est_dame</a>) {
<a name="l00795"></a>00795                                 aAjouter = coupsPossiblesDames(c, p);
<a name="l00796"></a>00796                         } <span class="keywordflow">else</span> {
<a name="l00797"></a>00797                                 aAjouter = coupsPossibles(c, p);
<a name="l00798"></a>00798                         }
<a name="l00799"></a>00799                         <span class="comment">/* recopie les coups possibles de ce pion dans cp */</span>
<a name="l00800"></a>00800                         <span class="keywordflow">while</span> ((aAjouter[k].old_case != 0) &amp;&amp; (aAjouter[k].new_case != 0)) {
<a name="l00801"></a>00801                                 cp[cnt_coup++] = aAjouter[k++];
<a name="l00802"></a>00802                         }
<a name="l00803"></a>00803                         k = 0;
<a name="l00804"></a>00804                 }
<a name="l00805"></a>00805         }
<a name="l00806"></a>00806         <span class="comment">/* pour marquer la fin de tableau */</span>
<a name="l00807"></a>00807         <a class="code" href="structcoup.html" title="Objet coup. Un coup est défini par un numéro de case de départ, un numéro de case d&amp;#39;arrivée...">coup</a> bidon;
<a name="l00808"></a>00808         bidon.old_case = 0;
<a name="l00809"></a>00809         bidon.new_case = 0;
<a name="l00810"></a>00810         cp[cnt_coup++] = bidon;
<a name="l00811"></a>00811 
<a name="l00812"></a>00812         <a class="code" href="structcoup.html" title="Objet coup. Un coup est défini par un numéro de case de départ, un numéro de case d&amp;#39;arrivée...">coup</a> *result = calloc(cnt_coup, <span class="keyword">sizeof</span>(<a class="code" href="structcoup.html" title="Objet coup. Un coup est défini par un numéro de case de départ, un numéro de case d&amp;#39;arrivée...">coup</a>));
<a name="l00813"></a>00813         memcpy(&amp;result, &amp;cp, <span class="keyword">sizeof</span> result);
<a name="l00814"></a>00814 
<a name="l00815"></a>00815         <span class="keywordflow">return</span> result;
<a name="l00816"></a>00816 }
<a name="l00817"></a>00817 
<a name="l00818"></a>00818 <span class="comment">/* retourne les coups max du tableau en entrée */</span>
<a name="l00819"></a>00819 <a class="code" href="structcoup.html" title="Objet coup. Un coup est défini par un numéro de case de départ, un numéro de case d&amp;#39;arrivée...">coup</a>* getCoupsMax(<span class="keyword">const</span> <a class="code" href="structcoup.html" title="Objet coup. Un coup est défini par un numéro de case de départ, un numéro de case d&amp;#39;arrivée...">coup</a> *cp) {
<a name="l00820"></a>00820 
<a name="l00821"></a>00821         <span class="keywordtype">int</span> i = 0;
<a name="l00822"></a>00822         <span class="comment">//coup coups_max[NBCOUPS];</span>
<a name="l00823"></a>00823         <a class="code" href="structcoup.html" title="Objet coup. Un coup est défini par un numéro de case de départ, un numéro de case d&amp;#39;arrivée...">coup</a> *coups_max = calloc(NBCOUPS, <span class="keyword">sizeof</span>(<a class="code" href="structcoup.html" title="Objet coup. Un coup est défini par un numéro de case de départ, un numéro de case d&amp;#39;arrivée...">coup</a>));
<a name="l00824"></a>00824         <span class="keywordtype">int</span> cnt_coups_max = 0;
<a name="l00825"></a>00825         <span class="keywordtype">int</span> nb_prises_max = 0;
<a name="l00826"></a>00826 
<a name="l00827"></a>00827         <span class="comment">/* je parcours une premiere fois cp pour trouver le nb de prises max rencontré */</span>
<a name="l00828"></a>00828         <span class="keywordflow">while</span> ((cp[i].old_case != 0) &amp;&amp; (cp[i].new_case != 0)) {
<a name="l00829"></a>00829                 <span class="keywordflow">if</span> (cp[i].nombre_prises &gt; nb_prises_max) {
<a name="l00830"></a>00830                         nb_prises_max = cp[i].nombre_prises;
<a name="l00831"></a>00831                 }
<a name="l00832"></a>00832                 i++;
<a name="l00833"></a>00833         }
<a name="l00834"></a>00834 
<a name="l00835"></a>00835         <span class="comment">/* je reparcours cp, cette fois je ne prend que les coups qui ont un</span>
<a name="l00836"></a>00836 <span class="comment">         * nb de prises égal au nb_prises_max</span>
<a name="l00837"></a>00837 <span class="comment">         */</span>
<a name="l00838"></a>00838         i = 0;
<a name="l00839"></a>00839         <span class="keywordflow">while</span> ((cp[i].old_case != 0) &amp;&amp; (cp[i].new_case != 0)) {
<a name="l00840"></a>00840                 <span class="keywordflow">if</span> (cp[i].nombre_prises == nb_prises_max) {
<a name="l00841"></a>00841                         coups_max[cnt_coups_max++] = cp[i];
<a name="l00842"></a>00842                 }
<a name="l00843"></a>00843                 i++;
<a name="l00844"></a>00844         }
<a name="l00845"></a>00845 
<a name="l00846"></a>00846         <span class="comment">/* je marque la fin de tableau */</span>
<a name="l00847"></a>00847         <a class="code" href="structcoup.html" title="Objet coup. Un coup est défini par un numéro de case de départ, un numéro de case d&amp;#39;arrivée...">coup</a> bidon;
<a name="l00848"></a>00848         bidon.old_case = 0;
<a name="l00849"></a>00849         bidon.new_case = 0;
<a name="l00850"></a>00850         coups_max[cnt_coups_max++] = bidon;
<a name="l00851"></a>00851 
<a name="l00852"></a>00852         <a class="code" href="structcoup.html" title="Objet coup. Un coup est défini par un numéro de case de départ, un numéro de case d&amp;#39;arrivée...">coup</a> *result = calloc(cnt_coups_max, <span class="keyword">sizeof</span>(<a class="code" href="structcoup.html" title="Objet coup. Un coup est défini par un numéro de case de départ, un numéro de case d&amp;#39;arrivée...">coup</a>));
<a name="l00853"></a>00853         memcpy(&amp;result, &amp;coups_max, <span class="keyword">sizeof</span>(result));
<a name="l00854"></a>00854 
<a name="l00855"></a>00855         <span class="keywordflow">return</span> result;
<a name="l00856"></a>00856 }
<a name="l00857"></a>00857 
<a name="l00858"></a>00858 <span class="comment">/* retourne les déplacements possible du pion sur la case c */</span>
<a name="l00859"></a><a class="code" href="regles_8h.html#a8cad1d75ddb058fd96ae940dd593080e">00859</a> <a class="code" href="structcoup.html" title="Objet coup. Un coup est défini par un numéro de case de départ, un numéro de case d&amp;#39;arrivée...">coup</a>* get_deplacements(<span class="keyword">const</span> <a class="code" href="structcase__plateau.html" title="Objet case du plateau de jeu. Une case est définie par une couleur et, si elle est noire...">case_plateau</a> c, <span class="keyword">const</span> <a class="code" href="structplateau.html" title="Objet plateau. Le plateau est composé de 50 cases, numérotées de 1 à 50. Il comporte un historique de...">plateau</a> p) {
<a name="l00860"></a>00860         <a class="code" href="structcoup.html" title="Objet coup. Un coup est défini par un numéro de case de départ, un numéro de case d&amp;#39;arrivée...">coup</a> *moves = calloc(3, <span class="keyword">sizeof</span>(<a class="code" href="structcoup.html" title="Objet coup. Un coup est défini par un numéro de case de départ, un numéro de case d&amp;#39;arrivée...">coup</a>));
<a name="l00861"></a>00861         <a class="code" href="structcoup.html" title="Objet coup. Un coup est défini par un numéro de case de départ, un numéro de case d&amp;#39;arrivée...">coup</a> *d = moves;
<a name="l00862"></a>00862         <a class="code" href="structplateau.html" title="Objet plateau. Le plateau est composé de 50 cases, numérotées de 1 à 50. Il comporte un historique de...">plateau</a> futur = p;
<a name="l00863"></a>00863         <span class="keywordflow">if</span> (c.pion.couleur == blanc) {
<a name="l00864"></a>00864                 <a class="code" href="structcase__plateau.html" title="Objet case du plateau de jeu. Une case est définie par une couleur et, si elle est noire...">case_plateau</a> c1 = <a class="code" href="plateau_8h.html#a60a8f706865d0ae9087f8d65d4667655" title="retourne la case si elle existe, ou la case 0 sinon">get_case_plateau_silent</a>(c.x - 1, c.y - 1, futur);
<a name="l00865"></a>00865                 <span class="keywordflow">if</span> ((c1.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a> != 0) &amp;&amp; c1.<a class="code" href="structcase__plateau.html#a173f25d2fd7c653d77ca8174ba4f636d">est_libre</a>) {
<a name="l00866"></a>00866                         <a class="code" href="structcoup.html" title="Objet coup. Un coup est défini par un numéro de case de départ, un numéro de case d&amp;#39;arrivée...">coup</a> nouveauCoup;
<a name="l00867"></a>00867                         nouveauCoup.old_case = c.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>;
<a name="l00868"></a>00868                         nouveauCoup.new_case = c1.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>;
<a name="l00869"></a>00869                         nouveauCoup.<a class="code" href="structcoup.html#aa33da004dccb192cb33bc00c26c6e859">tc</a> = <span class="charliteral">&#39;-&#39;</span>;
<a name="l00870"></a>00870                         *(d++) = nouveauCoup;
<a name="l00871"></a>00871                 }
<a name="l00872"></a>00872                 <a class="code" href="structcase__plateau.html" title="Objet case du plateau de jeu. Une case est définie par une couleur et, si elle est noire...">case_plateau</a> c2 = <a class="code" href="plateau_8h.html#a60a8f706865d0ae9087f8d65d4667655" title="retourne la case si elle existe, ou la case 0 sinon">get_case_plateau_silent</a>(c.x + 1, c.y - 1, futur);
<a name="l00873"></a>00873                 <span class="keywordflow">if</span> ((c2.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a> != 0) &amp;&amp; c2.<a class="code" href="structcase__plateau.html#a173f25d2fd7c653d77ca8174ba4f636d">est_libre</a>) {
<a name="l00874"></a>00874                         <a class="code" href="structcoup.html" title="Objet coup. Un coup est défini par un numéro de case de départ, un numéro de case d&amp;#39;arrivée...">coup</a> nouveauCoup;
<a name="l00875"></a>00875                         nouveauCoup.old_case = c.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>;
<a name="l00876"></a>00876                         nouveauCoup.new_case = c2.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>;
<a name="l00877"></a>00877                         nouveauCoup.<a class="code" href="structcoup.html#aa33da004dccb192cb33bc00c26c6e859">tc</a> = <span class="charliteral">&#39;-&#39;</span>;
<a name="l00878"></a>00878                         *(d++) = nouveauCoup;
<a name="l00879"></a>00879                 }
<a name="l00880"></a>00880         } <span class="keywordflow">else</span> {
<a name="l00881"></a>00881                 <a class="code" href="structcase__plateau.html" title="Objet case du plateau de jeu. Une case est définie par une couleur et, si elle est noire...">case_plateau</a> c1 = <a class="code" href="plateau_8h.html#a60a8f706865d0ae9087f8d65d4667655" title="retourne la case si elle existe, ou la case 0 sinon">get_case_plateau_silent</a>(c.x - 1, c.y + 1, futur);
<a name="l00882"></a>00882                 <span class="keywordflow">if</span> ((c1.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a> != 0) &amp;&amp; c1.<a class="code" href="structcase__plateau.html#a173f25d2fd7c653d77ca8174ba4f636d">est_libre</a>) {
<a name="l00883"></a>00883                         <a class="code" href="structcoup.html" title="Objet coup. Un coup est défini par un numéro de case de départ, un numéro de case d&amp;#39;arrivée...">coup</a> nouveauCoup;
<a name="l00884"></a>00884                         nouveauCoup.old_case = c.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>;
<a name="l00885"></a>00885                         nouveauCoup.new_case = c1.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>;
<a name="l00886"></a>00886                         nouveauCoup.<a class="code" href="structcoup.html#aa33da004dccb192cb33bc00c26c6e859">tc</a> = <span class="charliteral">&#39;-&#39;</span>;
<a name="l00887"></a>00887                         *(d++) = nouveauCoup;
<a name="l00888"></a>00888                 }
<a name="l00889"></a>00889                 <a class="code" href="structcase__plateau.html" title="Objet case du plateau de jeu. Une case est définie par une couleur et, si elle est noire...">case_plateau</a> c2 = <a class="code" href="plateau_8h.html#a60a8f706865d0ae9087f8d65d4667655" title="retourne la case si elle existe, ou la case 0 sinon">get_case_plateau_silent</a>(c.x + 1, c.y + 1, futur);
<a name="l00890"></a>00890                 <span class="keywordflow">if</span> ((c2.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a> != 0) &amp;&amp; c2.<a class="code" href="structcase__plateau.html#a173f25d2fd7c653d77ca8174ba4f636d">est_libre</a>) {
<a name="l00891"></a>00891                         <a class="code" href="structcoup.html" title="Objet coup. Un coup est défini par un numéro de case de départ, un numéro de case d&amp;#39;arrivée...">coup</a> nouveauCoup;
<a name="l00892"></a>00892                         nouveauCoup.old_case = c.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>;
<a name="l00893"></a>00893                         nouveauCoup.new_case = c2.<a class="code" href="structcase__plateau.html#ad510581b324604a9cf685cbb769a421a">notation_officielle</a>;
<a name="l00894"></a>00894                         nouveauCoup.<a class="code" href="structcoup.html#aa33da004dccb192cb33bc00c26c6e859">tc</a> = <span class="charliteral">&#39;-&#39;</span>;
<a name="l00895"></a>00895                         printf(<span class="stringliteral">&quot;\n&quot;</span>);
<a name="l00896"></a>00896                         *(d++) = nouveauCoup;
<a name="l00897"></a>00897                 }
<a name="l00898"></a>00898         }
<a name="l00899"></a>00899 
<a name="l00900"></a>00900         <span class="comment">/* je marque la fin du tableau */</span>
<a name="l00901"></a>00901         <a class="code" href="structcoup.html" title="Objet coup. Un coup est défini par un numéro de case de départ, un numéro de case d&amp;#39;arrivée...">coup</a> bidon;
<a name="l00902"></a>00902         bidon.old_case = 0;
<a name="l00903"></a>00903         bidon.new_case = 0;
<a name="l00904"></a>00904         *(d++) = bidon;
<a name="l00905"></a>00905 
<a name="l00906"></a>00906         <span class="keywordflow">return</span> moves;
<a name="l00907"></a>00907 }
<a name="l00908"></a>00908 
<a name="l00909"></a>00909 
<a name="l00910"></a>00910 
<a name="l00911"></a>00911 
<a name="l00912"></a>00912 <span class="comment">/* retourne 0 si liste1 = liste2, sinon 1 */</span>
<a name="l00913"></a><a class="code" href="regles_8h.html#aec569c705e9ec403a06151aba2092c52">00913</a> <span class="keywordtype">int</span> compare_coups(<a class="code" href="structcoup.html" title="Objet coup. Un coup est défini par un numéro de case de départ, un numéro de case d&amp;#39;arrivée...">coup</a> *liste1, <a class="code" href="structcoup.html" title="Objet coup. Un coup est défini par un numéro de case de départ, un numéro de case d&amp;#39;arrivée...">coup</a> *liste2) {
<a name="l00914"></a>00914         <a class="code" href="structcoup.html" title="Objet coup. Un coup est défini par un numéro de case de départ, un numéro de case d&amp;#39;arrivée...">coup</a> *p1 = liste1;
<a name="l00915"></a>00915         <a class="code" href="structcoup.html" title="Objet coup. Un coup est défini par un numéro de case de départ, un numéro de case d&amp;#39;arrivée...">coup</a> *p2 = liste2;
<a name="l00916"></a>00916 
<a name="l00917"></a>00917         <span class="keywordflow">while</span>(p1-&gt;old_case != 0) {
<a name="l00918"></a>00918                 <span class="keywordflow">if</span>((p1-&gt;old_case != p2-&gt;old_case)
<a name="l00919"></a>00919                                 || (p1-&gt;new_case != p2-&gt;new_case)
<a name="l00920"></a>00920                                 || (p1-&gt;nombre_prises != p2-&gt;nombre_prises)
<a name="l00921"></a>00921                                 || (p1-&gt;<a class="code" href="structcoup.html#aa33da004dccb192cb33bc00c26c6e859">tc</a> != p2-&gt;<a class="code" href="structcoup.html#aa33da004dccb192cb33bc00c26c6e859">tc</a>))
<a name="l00922"></a>00922                         <span class="keywordflow">return</span> 1;
<a name="l00923"></a>00923                 p1++;
<a name="l00924"></a>00924                 p2++;
<a name="l00925"></a>00925         }
<a name="l00926"></a>00926         <span class="keywordflow">return</span> 0;
<a name="l00927"></a>00927 }
<a name="l00928"></a>00928 
<a name="l00929"></a><a class="code" href="regles_8h.html#a60a8f706865d0ae9087f8d65d4667655">00929</a> <a class="code" href="structcase__plateau.html" title="Objet case du plateau de jeu. Une case est définie par une couleur et, si elle est noire...">case_plateau</a> <a class="code" href="plateau_8h.html#a60a8f706865d0ae9087f8d65d4667655" title="retourne la case si elle existe, ou la case 0 sinon">get_case_plateau_silent</a>(<span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y, <a class="code" href="structplateau.html" title="Objet plateau. Le plateau est composé de 50 cases, numérotées de 1 à 50. Il comporte un historique de...">plateau</a> p) {
<a name="l00930"></a>00930         <span class="keywordflow">if</span> (x &lt; 1 || x &gt; 10 || y &lt; 1 || y &gt; 10) {
<a name="l00931"></a>00931                 <span class="keywordflow">return</span> p.<a class="code" href="structplateau.html#a6afaa60f594542e0d742b0c6d3223392">cases</a>[0];
<a name="l00932"></a>00932         }
<a name="l00933"></a>00933         <span class="keywordflow">if</span> ((x % 2) == (y % 2)) { <span class="comment">/* si x et y sont tout les deux pairs (ou impairs), alors c&#39;est une case blanche */</span>
<a name="l00934"></a>00934                 <span class="keywordflow">return</span> p.<a class="code" href="structplateau.html#a6afaa60f594542e0d742b0c6d3223392">cases</a>[0];
<a name="l00935"></a>00935         } <span class="keywordflow">else</span> {
<a name="l00936"></a>00936                 <span class="keywordtype">int</span> i;
<a name="l00937"></a>00937                 <span class="keywordflow">for</span> (i = 1; i &lt;= 50; i++) { <span class="comment">/* temporairement on fait une recherche dans le tableau, en attendant un algorithme qui offre de meilleures performances */</span>
<a name="l00938"></a>00938                         <a class="code" href="structcase__plateau.html" title="Objet case du plateau de jeu. Une case est définie par une couleur et, si elle est noire...">case_plateau</a> c = p.<a class="code" href="structplateau.html#a6afaa60f594542e0d742b0c6d3223392">cases</a>[i];
<a name="l00939"></a>00939                         <span class="keywordflow">if</span> (c.x == x &amp;&amp; c.y == y) {
<a name="l00940"></a>00940                                 <span class="keywordflow">return</span> c;
<a name="l00941"></a>00941                         }
<a name="l00942"></a>00942                 }
<a name="l00943"></a>00943                 <span class="keywordflow">return</span> p.<a class="code" href="structplateau.html#a6afaa60f594542e0d742b0c6d3223392">cases</a>[0];
<a name="l00944"></a>00944         }
<a name="l00945"></a>00945 }
</pre></div></div>
</div>
<!--- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>Tout</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Structures de données</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Fichiers</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Fonctions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Énumérations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Valeurs énumérées</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<hr class="footer"/><address class="footer"><small>Généré le Mon May 9 2011 00:36:51 pour Jeu de dames par&#160;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.3 </small></address>
</body>
</html>
