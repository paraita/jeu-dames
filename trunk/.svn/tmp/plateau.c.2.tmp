/*
 * plateau.c
 *
 *  Created on: 20 mars 2011
 *      Author: bastien
 */

#include <stdio.h>
#include "plateau.h"

plateau nouveau_plateau(joueur j1, joueur j2) {
	plateau p;
	j1.couleur = blanc;
	j2.couleur = noir;
	p.joueur1 = j1;
	p.joueur2 = j2;
	p.tour = j1;
	p.i = 0;
	int i = 1;
	int x = 2;
	int y = 1;
	while (i <= 50) { /* on remplit le plateau ( bug ici j ai change le 20 en 50)*/
		pion pion;
		pion.est_dame = 0;
		case_plateau c;
		c.notation_officielle = i;
		c.couleur = noir;
		c.en_surbrillance = 0;
		c.x = x;
		c.y = y;
		if (i <= 20) { /* si on est du côté des noirs, on place les pions */
			c.est_libre = 0;
			pion.couleur = noir;
			pion.en_surbrillance = 0;
			c.pion = pion;
		} else if (i > 30) { /* si on est du côté des blancs */
			c.est_libre = 0;
			pion.couleur = blanc;
			pion.en_surbrillance = 0;
			c.pion = pion;
		} else { /* si on est au centre on a des case libres */
			c.est_libre = 1;
		}
		p.cases[i] = c;

		i++;
		x = x + 2;
		if (i % 10 == 6) { /* on détecte les changements de ligne pour décaler x et incrémenter y */
			/*printf("%i mod 10 = %i\n",i,i%10);*/
			x = 1;
			y++;
		} else if (i % 10 == 1) {
			/*printf("%i mod 10 = %i\n",i,i%10);*/
			x = 2;
			y++;
		}
	}

	case_plateau case_blanche;
	case_blanche.couleur = blanc;
	case_blanche.est_libre = 1;
	case_blanche.notation_officielle = 0;
	case_blanche.en_surbrillance = 0;
	case_blanche.x = 0;
	case_blanche.y = 0;
	p.cases[0] = case_blanche;
	return p;
}

int plateau_deplacer_pion(int old_position, int new_position, plateau *p) {
	if (old_position < 1 || old_position > 50 || new_position < 1
			|| new_position > 50 || p->cases[old_position].est_libre
			|| !p->cases[new_position].est_libre) {
		return 0;
	} else {
		pion pion = p->cases[old_position].pion;
		p->cases[old_position].est_libre = 1;
		p->cases[new_position].est_libre = 0;
		p->cases[new_position].pion = pion;
		return 1;
	}
}

int plateau_prendre_pion(int position, plateau *p) {
	if (position < 1 || position > 50 || p->cases[position].est_libre) {
		return 0;
	} else {
		p->cases[position].est_libre = 1;
		return 1;
	}
}

void plateau_ajouter_coup(coup c, plateau *p) {
	int i = p->i;
	if (i < 500) {
		p->historique[i] = c;
		p->i = i + 1;
	}
}

case_plateau get_case_plateau(int x, int y, plateau p) {
	if (x < 1 || x > 10 || y < 1 || y > 10) {
		fprintf(stderr, "Case hors plateau (%i,%i)\n", x, y);
		return p.cases[0];
	}
	if ((x % 2) == (y % 2)) { /* si x et y sont tout les deux pairs (ou impairs), alors c'est une case blanche */
		return p.cases[0];
	} else {
		int i;
		for (i = (y - 1) * 5; i <= 50; i++) { /* temporairement on fait une recherche dans le tableau, en attendant un algorithme qui offre de meilleures performances */
			case_plateau c = p.cases[i];
			if (c.x == x && c.y == y) {
				return c;
			}
		}
		return p.cases[0];
	}
}

void print_case(case_plateau c) {
		printf("Case [%i] : (%i,%i) couleur : %i, est_libre : %i\n",
				c.notation_officielle, c.x, c.y, c.couleur, c.est_libre);
}

void set_case_en_surbrillance(int numero,plateau *p) {
	p->cases[numero].en_surbrillance = 1;
}

void set_pion_en_surbrillance(int numero,plateau *p) {
	p->cases[numero].pion.en_surbrillance = 1;
}

void reset_surbrillance(plateau *p) {
	int i;
	for(i = 0; i < 51; i++) {
		p->cases[i].en_surbrillance = 0;
		p->cases[i].pion.en_surbrillance = 0;
	}
}
